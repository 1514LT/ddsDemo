// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataDefineCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DATADEFINECDRAUX_IPP_
#define _FAST_DDS_GENERATED_DATADEFINECDRAUX_IPP_

#include "DataDefineCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {



template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const TimeBroadcast& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.number(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.seconds(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.milliseconds(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const TimeBroadcast& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.number()
        << eprosima::fastcdr::MemberId(1) << data.seconds()
        << eprosima::fastcdr::MemberId(2) << data.milliseconds()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        TimeBroadcast& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.number();
                                            break;

                                        case 1:
                                                dcdr >> data.seconds();
                                            break;

                                        case 2:
                                                dcdr >> data.milliseconds();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TimeBroadcast& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const TrackBroadcast& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.trackType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.seconds(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.microseconds(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.axisX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.axisY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.axisZ(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.speedX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.speedY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.speedZ(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const TrackBroadcast& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.trackType()
        << eprosima::fastcdr::MemberId(1) << data.seconds()
        << eprosima::fastcdr::MemberId(2) << data.microseconds()
        << eprosima::fastcdr::MemberId(3) << data.axisX()
        << eprosima::fastcdr::MemberId(4) << data.axisY()
        << eprosima::fastcdr::MemberId(5) << data.axisZ()
        << eprosima::fastcdr::MemberId(6) << data.speedX()
        << eprosima::fastcdr::MemberId(7) << data.speedY()
        << eprosima::fastcdr::MemberId(8) << data.speedZ()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        TrackBroadcast& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.trackType();
                                            break;

                                        case 1:
                                                dcdr >> data.seconds();
                                            break;

                                        case 2:
                                                dcdr >> data.microseconds();
                                            break;

                                        case 3:
                                                dcdr >> data.axisX();
                                            break;

                                        case 4:
                                                dcdr >> data.axisY();
                                            break;

                                        case 5:
                                                dcdr >> data.axisZ();
                                            break;

                                        case 6:
                                                dcdr >> data.speedX();
                                            break;

                                        case 7:
                                                dcdr >> data.speedY();
                                            break;

                                        case 8:
                                                dcdr >> data.speedZ();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TrackBroadcast& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const AttitudeBroadcast& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.gap(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.seconds(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.microseconds(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.roll(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.pitch(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.yaw(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.Vroll(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.Vpitch(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.Vyaw(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const AttitudeBroadcast& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.gap()
        << eprosima::fastcdr::MemberId(1) << data.seconds()
        << eprosima::fastcdr::MemberId(2) << data.microseconds()
        << eprosima::fastcdr::MemberId(3) << data.roll()
        << eprosima::fastcdr::MemberId(4) << data.pitch()
        << eprosima::fastcdr::MemberId(5) << data.yaw()
        << eprosima::fastcdr::MemberId(6) << data.Vroll()
        << eprosima::fastcdr::MemberId(7) << data.Vpitch()
        << eprosima::fastcdr::MemberId(8) << data.Vyaw()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        AttitudeBroadcast& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.gap();
                                            break;

                                        case 1:
                                                dcdr >> data.seconds();
                                            break;

                                        case 2:
                                                dcdr >> data.microseconds();
                                            break;

                                        case 3:
                                                dcdr >> data.roll();
                                            break;

                                        case 4:
                                                dcdr >> data.pitch();
                                            break;

                                        case 5:
                                                dcdr >> data.yaw();
                                            break;

                                        case 6:
                                                dcdr >> data.Vroll();
                                            break;

                                        case 7:
                                                dcdr >> data.Vpitch();
                                            break;

                                        case 8:
                                                dcdr >> data.Vyaw();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const AttitudeBroadcast& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const TrackPredict& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.number(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.timestamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.locX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.locY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.locZ(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.speedX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.speedY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.speedZ(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const TrackPredict& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.number()
        << eprosima::fastcdr::MemberId(1) << data.timestamp()
        << eprosima::fastcdr::MemberId(2) << data.locX()
        << eprosima::fastcdr::MemberId(3) << data.locY()
        << eprosima::fastcdr::MemberId(4) << data.locZ()
        << eprosima::fastcdr::MemberId(5) << data.speedX()
        << eprosima::fastcdr::MemberId(6) << data.speedY()
        << eprosima::fastcdr::MemberId(7) << data.speedZ()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        TrackPredict& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.number();
                                            break;

                                        case 1:
                                                dcdr >> data.timestamp();
                                            break;

                                        case 2:
                                                dcdr >> data.locX();
                                            break;

                                        case 3:
                                                dcdr >> data.locY();
                                            break;

                                        case 4:
                                                dcdr >> data.locZ();
                                            break;

                                        case 5:
                                                dcdr >> data.speedX();
                                            break;

                                        case 6:
                                                dcdr >> data.speedY();
                                            break;

                                        case 7:
                                                dcdr >> data.speedZ();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TrackPredict& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const TelemetryRequest& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.number(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.command(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const TelemetryRequest& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.number()
        << eprosima::fastcdr::MemberId(1) << data.command()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        TelemetryRequest& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.number();
                                            break;

                                        case 1:
                                                dcdr >> data.command();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TelemetryRequest& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const TelemetryReply& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.loctime4(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.loctime3(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.loctime2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.loctime1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.sysState(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.commandCnt(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.busSignature(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.subsysState(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.imgMode(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.startTimeHigh(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.startTimeLow(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.subbandCont(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.argTelemetry1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.taskNumber(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.cmdQueueLength(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.digitalTelemetry1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.digitalTelemetry2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.power100M(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.RFFM(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.RFamplify(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(20),
                data.RFoscillate(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(21),
                data.RFmainOsc5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(22),
                data.RFbackOsc5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(23),
                data.RFmain8p5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(24),
                data.RFback8p5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(25),
                data.RFmain5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(26),
                data.RFback5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(27),
                data.captureMain5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(28),
                data.captureBack5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(29),
                data.controlMain5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(30),
                data.controlBack5v(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(31),
                data.realMod1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(32),
                data.realMod2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(33),
                data.realMod3(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(34),
                data.realMod4(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(35),
                data.argTelemetry2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(36),
                data.argTelemetry3(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(37),
                data.argTelemetry4(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(38),
                data.argTelemetry5(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(39),
                data.argTelemetry6(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const TelemetryReply& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.loctime4()
        << eprosima::fastcdr::MemberId(1) << data.loctime3()
        << eprosima::fastcdr::MemberId(2) << data.loctime2()
        << eprosima::fastcdr::MemberId(3) << data.loctime1()
        << eprosima::fastcdr::MemberId(4) << data.sysState()
        << eprosima::fastcdr::MemberId(5) << data.commandCnt()
        << eprosima::fastcdr::MemberId(6) << data.busSignature()
        << eprosima::fastcdr::MemberId(7) << data.subsysState()
        << eprosima::fastcdr::MemberId(8) << data.imgMode()
        << eprosima::fastcdr::MemberId(9) << data.startTimeHigh()
        << eprosima::fastcdr::MemberId(10) << data.startTimeLow()
        << eprosima::fastcdr::MemberId(11) << data.subbandCont()
        << eprosima::fastcdr::MemberId(12) << data.argTelemetry1()
        << eprosima::fastcdr::MemberId(13) << data.taskNumber()
        << eprosima::fastcdr::MemberId(14) << data.cmdQueueLength()
        << eprosima::fastcdr::MemberId(15) << data.digitalTelemetry1()
        << eprosima::fastcdr::MemberId(16) << data.digitalTelemetry2()
        << eprosima::fastcdr::MemberId(17) << data.power100M()
        << eprosima::fastcdr::MemberId(18) << data.RFFM()
        << eprosima::fastcdr::MemberId(19) << data.RFamplify()
        << eprosima::fastcdr::MemberId(20) << data.RFoscillate()
        << eprosima::fastcdr::MemberId(21) << data.RFmainOsc5v()
        << eprosima::fastcdr::MemberId(22) << data.RFbackOsc5v()
        << eprosima::fastcdr::MemberId(23) << data.RFmain8p5v()
        << eprosima::fastcdr::MemberId(24) << data.RFback8p5v()
        << eprosima::fastcdr::MemberId(25) << data.RFmain5v()
        << eprosima::fastcdr::MemberId(26) << data.RFback5v()
        << eprosima::fastcdr::MemberId(27) << data.captureMain5v()
        << eprosima::fastcdr::MemberId(28) << data.captureBack5v()
        << eprosima::fastcdr::MemberId(29) << data.controlMain5v()
        << eprosima::fastcdr::MemberId(30) << data.controlBack5v()
        << eprosima::fastcdr::MemberId(31) << data.realMod1()
        << eprosima::fastcdr::MemberId(32) << data.realMod2()
        << eprosima::fastcdr::MemberId(33) << data.realMod3()
        << eprosima::fastcdr::MemberId(34) << data.realMod4()
        << eprosima::fastcdr::MemberId(35) << data.argTelemetry2()
        << eprosima::fastcdr::MemberId(36) << data.argTelemetry3()
        << eprosima::fastcdr::MemberId(37) << data.argTelemetry4()
        << eprosima::fastcdr::MemberId(38) << data.argTelemetry5()
        << eprosima::fastcdr::MemberId(39) << data.argTelemetry6()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        TelemetryReply& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.loctime4();
                                            break;

                                        case 1:
                                                dcdr >> data.loctime3();
                                            break;

                                        case 2:
                                                dcdr >> data.loctime2();
                                            break;

                                        case 3:
                                                dcdr >> data.loctime1();
                                            break;

                                        case 4:
                                                dcdr >> data.sysState();
                                            break;

                                        case 5:
                                                dcdr >> data.commandCnt();
                                            break;

                                        case 6:
                                                dcdr >> data.busSignature();
                                            break;

                                        case 7:
                                                dcdr >> data.subsysState();
                                            break;

                                        case 8:
                                                dcdr >> data.imgMode();
                                            break;

                                        case 9:
                                                dcdr >> data.startTimeHigh();
                                            break;

                                        case 10:
                                                dcdr >> data.startTimeLow();
                                            break;

                                        case 11:
                                                dcdr >> data.subbandCont();
                                            break;

                                        case 12:
                                                dcdr >> data.argTelemetry1();
                                            break;

                                        case 13:
                                                dcdr >> data.taskNumber();
                                            break;

                                        case 14:
                                                dcdr >> data.cmdQueueLength();
                                            break;

                                        case 15:
                                                dcdr >> data.digitalTelemetry1();
                                            break;

                                        case 16:
                                                dcdr >> data.digitalTelemetry2();
                                            break;

                                        case 17:
                                                dcdr >> data.power100M();
                                            break;

                                        case 18:
                                                dcdr >> data.RFFM();
                                            break;

                                        case 19:
                                                dcdr >> data.RFamplify();
                                            break;

                                        case 20:
                                                dcdr >> data.RFoscillate();
                                            break;

                                        case 21:
                                                dcdr >> data.RFmainOsc5v();
                                            break;

                                        case 22:
                                                dcdr >> data.RFbackOsc5v();
                                            break;

                                        case 23:
                                                dcdr >> data.RFmain8p5v();
                                            break;

                                        case 24:
                                                dcdr >> data.RFback8p5v();
                                            break;

                                        case 25:
                                                dcdr >> data.RFmain5v();
                                            break;

                                        case 26:
                                                dcdr >> data.RFback5v();
                                            break;

                                        case 27:
                                                dcdr >> data.captureMain5v();
                                            break;

                                        case 28:
                                                dcdr >> data.captureBack5v();
                                            break;

                                        case 29:
                                                dcdr >> data.controlMain5v();
                                            break;

                                        case 30:
                                                dcdr >> data.controlBack5v();
                                            break;

                                        case 31:
                                                dcdr >> data.realMod1();
                                            break;

                                        case 32:
                                                dcdr >> data.realMod2();
                                            break;

                                        case 33:
                                                dcdr >> data.realMod3();
                                            break;

                                        case 34:
                                                dcdr >> data.realMod4();
                                            break;

                                        case 35:
                                                dcdr >> data.argTelemetry2();
                                            break;

                                        case 36:
                                                dcdr >> data.argTelemetry3();
                                            break;

                                        case 37:
                                                dcdr >> data.argTelemetry4();
                                            break;

                                        case 38:
                                                dcdr >> data.argTelemetry5();
                                            break;

                                        case 39:
                                                dcdr >> data.argTelemetry6();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TelemetryReply& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ParamPackage& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.packSize(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.contentCtrl(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.taskNumber(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.block1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.block2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.block3(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.block4(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.matrixSelect(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.gap(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ParamPackage& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.packSize()
        << eprosima::fastcdr::MemberId(1) << data.contentCtrl()
        << eprosima::fastcdr::MemberId(2) << data.taskNumber()
        << eprosima::fastcdr::MemberId(3) << data.block1()
        << eprosima::fastcdr::MemberId(4) << data.block2()
        << eprosima::fastcdr::MemberId(5) << data.block3()
        << eprosima::fastcdr::MemberId(6) << data.block4()
        << eprosima::fastcdr::MemberId(7) << data.matrixSelect()
        << eprosima::fastcdr::MemberId(8) << data.gap()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ParamPackage& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.packSize();
                                            break;

                                        case 1:
                                                dcdr >> data.contentCtrl();
                                            break;

                                        case 2:
                                                dcdr >> data.taskNumber();
                                            break;

                                        case 3:
                                                dcdr >> data.block1();
                                            break;

                                        case 4:
                                                dcdr >> data.block2();
                                            break;

                                        case 5:
                                                dcdr >> data.block3();
                                            break;

                                        case 6:
                                                dcdr >> data.block4();
                                            break;

                                        case 7:
                                                dcdr >> data.matrixSelect();
                                            break;

                                        case 8:
                                                dcdr >> data.gap();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ParamPackage& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}



} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_DATADEFINECDRAUX_IPP_

