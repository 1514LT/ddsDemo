// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataDefine.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataDefine.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




Target::Target()
{
}

Target::~Target()
{
}

Target::Target(
        const Target& x)
{
    m_index = x.m_index;
    m_message = x.m_message;
}

Target::Target(
        Target&& x) noexcept
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
}

Target& Target::operator =(
        const Target& x)
{

    m_index = x.m_index;
    m_message = x.m_message;
    return *this;
}

Target& Target::operator =(
        Target&& x) noexcept
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);
    return *this;
}

bool Target::operator ==(
        const Target& x) const
{
    return (m_index == x.m_index &&
           m_message == x.m_message);
}

bool Target::operator !=(
        const Target& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void Target::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t Target::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& Target::index()
{
    return m_index;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void Target::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void Target::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& Target::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& Target::message()
{
    return m_message;
}




ReplyInfo::ReplyInfo()
{
}

ReplyInfo::~ReplyInfo()
{
}

ReplyInfo::ReplyInfo(
        const ReplyInfo& x)
{
    m_is_recved = x.m_is_recved;
}

ReplyInfo::ReplyInfo(
        ReplyInfo&& x) noexcept
{
    m_is_recved = x.m_is_recved;
}

ReplyInfo& ReplyInfo::operator =(
        const ReplyInfo& x)
{

    m_is_recved = x.m_is_recved;
    return *this;
}

ReplyInfo& ReplyInfo::operator =(
        ReplyInfo&& x) noexcept
{

    m_is_recved = x.m_is_recved;
    return *this;
}

bool ReplyInfo::operator ==(
        const ReplyInfo& x) const
{
    return (m_is_recved == x.m_is_recved);
}

bool ReplyInfo::operator !=(
        const ReplyInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member is_recved
 * @param _is_recved New value for member is_recved
 */
void ReplyInfo::is_recved(
        uint8_t _is_recved)
{
    m_is_recved = _is_recved;
}

/*!
 * @brief This function returns the value of member is_recved
 * @return Value of member is_recved
 */
uint8_t ReplyInfo::is_recved() const
{
    return m_is_recved;
}

/*!
 * @brief This function returns a reference to member is_recved
 * @return Reference to member is_recved
 */
uint8_t& ReplyInfo::is_recved()
{
    return m_is_recved;
}




RestartInfo::RestartInfo()
{
}

RestartInfo::~RestartInfo()
{
}

RestartInfo::RestartInfo(
        const RestartInfo& x)
{
    m_participant = x.m_participant;
    m_transportType = x.m_transportType;
}

RestartInfo::RestartInfo(
        RestartInfo&& x) noexcept
{
    m_participant = x.m_participant;
    m_transportType = x.m_transportType;
}

RestartInfo& RestartInfo::operator =(
        const RestartInfo& x)
{

    m_participant = x.m_participant;
    m_transportType = x.m_transportType;
    return *this;
}

RestartInfo& RestartInfo::operator =(
        RestartInfo&& x) noexcept
{

    m_participant = x.m_participant;
    m_transportType = x.m_transportType;
    return *this;
}

bool RestartInfo::operator ==(
        const RestartInfo& x) const
{
    return (m_participant == x.m_participant &&
           m_transportType == x.m_transportType);
}

bool RestartInfo::operator !=(
        const RestartInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member participant
 * @param _participant New value for member participant
 */
void RestartInfo::participant(
        uint8_t _participant)
{
    m_participant = _participant;
}

/*!
 * @brief This function returns the value of member participant
 * @return Value of member participant
 */
uint8_t RestartInfo::participant() const
{
    return m_participant;
}

/*!
 * @brief This function returns a reference to member participant
 * @return Reference to member participant
 */
uint8_t& RestartInfo::participant()
{
    return m_participant;
}


/*!
 * @brief This function sets a value in member transportType
 * @param _transportType New value for member transportType
 */
void RestartInfo::transportType(
        uint8_t _transportType)
{
    m_transportType = _transportType;
}

/*!
 * @brief This function returns the value of member transportType
 * @return Value of member transportType
 */
uint8_t RestartInfo::transportType() const
{
    return m_transportType;
}

/*!
 * @brief This function returns a reference to member transportType
 * @return Reference to member transportType
 */
uint8_t& RestartInfo::transportType()
{
    return m_transportType;
}


// Include auxiliary functions like for serializing/deserializing.
#include "DataDefineCdrAux.ipp"

