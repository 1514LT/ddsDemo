// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataDefine.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataDefine.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




TimeBroadcast::TimeBroadcast()
{
}

TimeBroadcast::~TimeBroadcast()
{
}

TimeBroadcast::TimeBroadcast(
        const TimeBroadcast& x)
{
    m_number = x.m_number;
    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;
}

TimeBroadcast::TimeBroadcast(
        TimeBroadcast&& x) noexcept
{
    m_number = x.m_number;
    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;
}

TimeBroadcast& TimeBroadcast::operator =(
        const TimeBroadcast& x)
{

    m_number = x.m_number;
    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;
    return *this;
}

TimeBroadcast& TimeBroadcast::operator =(
        TimeBroadcast&& x) noexcept
{

    m_number = x.m_number;
    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;
    return *this;
}

bool TimeBroadcast::operator ==(
        const TimeBroadcast& x) const
{
    return (m_number == x.m_number &&
           m_seconds == x.m_seconds &&
           m_milliseconds == x.m_milliseconds);
}

bool TimeBroadcast::operator !=(
        const TimeBroadcast& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member number
 * @param _number New value for member number
 */
void TimeBroadcast::number(
        uint8_t _number)
{
    m_number = _number;
}

/*!
 * @brief This function returns the value of member number
 * @return Value of member number
 */
uint8_t TimeBroadcast::number() const
{
    return m_number;
}

/*!
 * @brief This function returns a reference to member number
 * @return Reference to member number
 */
uint8_t& TimeBroadcast::number()
{
    return m_number;
}


/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void TimeBroadcast::seconds(
        uint32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
uint32_t TimeBroadcast::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
uint32_t& TimeBroadcast::seconds()
{
    return m_seconds;
}


/*!
 * @brief This function sets a value in member milliseconds
 * @param _milliseconds New value for member milliseconds
 */
void TimeBroadcast::milliseconds(
        uint32_t _milliseconds)
{
    m_milliseconds = _milliseconds;
}

/*!
 * @brief This function returns the value of member milliseconds
 * @return Value of member milliseconds
 */
uint32_t TimeBroadcast::milliseconds() const
{
    return m_milliseconds;
}

/*!
 * @brief This function returns a reference to member milliseconds
 * @return Reference to member milliseconds
 */
uint32_t& TimeBroadcast::milliseconds()
{
    return m_milliseconds;
}




TrackBroadcast::TrackBroadcast()
{
}

TrackBroadcast::~TrackBroadcast()
{
}

TrackBroadcast::TrackBroadcast(
        const TrackBroadcast& x)
{
    m_trackType = x.m_trackType;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_axisX = x.m_axisX;
    m_axisY = x.m_axisY;
    m_axisZ = x.m_axisZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
}

TrackBroadcast::TrackBroadcast(
        TrackBroadcast&& x) noexcept
{
    m_trackType = x.m_trackType;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_axisX = x.m_axisX;
    m_axisY = x.m_axisY;
    m_axisZ = x.m_axisZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
}

TrackBroadcast& TrackBroadcast::operator =(
        const TrackBroadcast& x)
{

    m_trackType = x.m_trackType;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_axisX = x.m_axisX;
    m_axisY = x.m_axisY;
    m_axisZ = x.m_axisZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    return *this;
}

TrackBroadcast& TrackBroadcast::operator =(
        TrackBroadcast&& x) noexcept
{

    m_trackType = x.m_trackType;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_axisX = x.m_axisX;
    m_axisY = x.m_axisY;
    m_axisZ = x.m_axisZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    return *this;
}

bool TrackBroadcast::operator ==(
        const TrackBroadcast& x) const
{
    return (m_trackType == x.m_trackType &&
           m_seconds == x.m_seconds &&
           m_microseconds == x.m_microseconds &&
           m_axisX == x.m_axisX &&
           m_axisY == x.m_axisY &&
           m_axisZ == x.m_axisZ &&
           m_speedX == x.m_speedX &&
           m_speedY == x.m_speedY &&
           m_speedZ == x.m_speedZ);
}

bool TrackBroadcast::operator !=(
        const TrackBroadcast& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member trackType
 * @param _trackType New value for member trackType
 */
void TrackBroadcast::trackType(
        uint8_t _trackType)
{
    m_trackType = _trackType;
}

/*!
 * @brief This function returns the value of member trackType
 * @return Value of member trackType
 */
uint8_t TrackBroadcast::trackType() const
{
    return m_trackType;
}

/*!
 * @brief This function returns a reference to member trackType
 * @return Reference to member trackType
 */
uint8_t& TrackBroadcast::trackType()
{
    return m_trackType;
}


/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void TrackBroadcast::seconds(
        uint32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
uint32_t TrackBroadcast::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
uint32_t& TrackBroadcast::seconds()
{
    return m_seconds;
}


/*!
 * @brief This function sets a value in member microseconds
 * @param _microseconds New value for member microseconds
 */
void TrackBroadcast::microseconds(
        uint32_t _microseconds)
{
    m_microseconds = _microseconds;
}

/*!
 * @brief This function returns the value of member microseconds
 * @return Value of member microseconds
 */
uint32_t TrackBroadcast::microseconds() const
{
    return m_microseconds;
}

/*!
 * @brief This function returns a reference to member microseconds
 * @return Reference to member microseconds
 */
uint32_t& TrackBroadcast::microseconds()
{
    return m_microseconds;
}


/*!
 * @brief This function sets a value in member axisX
 * @param _axisX New value for member axisX
 */
void TrackBroadcast::axisX(
        float _axisX)
{
    m_axisX = _axisX;
}

/*!
 * @brief This function returns the value of member axisX
 * @return Value of member axisX
 */
float TrackBroadcast::axisX() const
{
    return m_axisX;
}

/*!
 * @brief This function returns a reference to member axisX
 * @return Reference to member axisX
 */
float& TrackBroadcast::axisX()
{
    return m_axisX;
}


/*!
 * @brief This function sets a value in member axisY
 * @param _axisY New value for member axisY
 */
void TrackBroadcast::axisY(
        float _axisY)
{
    m_axisY = _axisY;
}

/*!
 * @brief This function returns the value of member axisY
 * @return Value of member axisY
 */
float TrackBroadcast::axisY() const
{
    return m_axisY;
}

/*!
 * @brief This function returns a reference to member axisY
 * @return Reference to member axisY
 */
float& TrackBroadcast::axisY()
{
    return m_axisY;
}


/*!
 * @brief This function sets a value in member axisZ
 * @param _axisZ New value for member axisZ
 */
void TrackBroadcast::axisZ(
        float _axisZ)
{
    m_axisZ = _axisZ;
}

/*!
 * @brief This function returns the value of member axisZ
 * @return Value of member axisZ
 */
float TrackBroadcast::axisZ() const
{
    return m_axisZ;
}

/*!
 * @brief This function returns a reference to member axisZ
 * @return Reference to member axisZ
 */
float& TrackBroadcast::axisZ()
{
    return m_axisZ;
}


/*!
 * @brief This function sets a value in member speedX
 * @param _speedX New value for member speedX
 */
void TrackBroadcast::speedX(
        float _speedX)
{
    m_speedX = _speedX;
}

/*!
 * @brief This function returns the value of member speedX
 * @return Value of member speedX
 */
float TrackBroadcast::speedX() const
{
    return m_speedX;
}

/*!
 * @brief This function returns a reference to member speedX
 * @return Reference to member speedX
 */
float& TrackBroadcast::speedX()
{
    return m_speedX;
}


/*!
 * @brief This function sets a value in member speedY
 * @param _speedY New value for member speedY
 */
void TrackBroadcast::speedY(
        float _speedY)
{
    m_speedY = _speedY;
}

/*!
 * @brief This function returns the value of member speedY
 * @return Value of member speedY
 */
float TrackBroadcast::speedY() const
{
    return m_speedY;
}

/*!
 * @brief This function returns a reference to member speedY
 * @return Reference to member speedY
 */
float& TrackBroadcast::speedY()
{
    return m_speedY;
}


/*!
 * @brief This function sets a value in member speedZ
 * @param _speedZ New value for member speedZ
 */
void TrackBroadcast::speedZ(
        float _speedZ)
{
    m_speedZ = _speedZ;
}

/*!
 * @brief This function returns the value of member speedZ
 * @return Value of member speedZ
 */
float TrackBroadcast::speedZ() const
{
    return m_speedZ;
}

/*!
 * @brief This function returns a reference to member speedZ
 * @return Reference to member speedZ
 */
float& TrackBroadcast::speedZ()
{
    return m_speedZ;
}




AttitudeBroadcast::AttitudeBroadcast()
{
}

AttitudeBroadcast::~AttitudeBroadcast()
{
}

AttitudeBroadcast::AttitudeBroadcast(
        const AttitudeBroadcast& x)
{
    m_gap = x.m_gap;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_Vroll = x.m_Vroll;
    m_Vpitch = x.m_Vpitch;
    m_Vyaw = x.m_Vyaw;
}

AttitudeBroadcast::AttitudeBroadcast(
        AttitudeBroadcast&& x) noexcept
{
    m_gap = x.m_gap;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_Vroll = x.m_Vroll;
    m_Vpitch = x.m_Vpitch;
    m_Vyaw = x.m_Vyaw;
}

AttitudeBroadcast& AttitudeBroadcast::operator =(
        const AttitudeBroadcast& x)
{

    m_gap = x.m_gap;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_Vroll = x.m_Vroll;
    m_Vpitch = x.m_Vpitch;
    m_Vyaw = x.m_Vyaw;
    return *this;
}

AttitudeBroadcast& AttitudeBroadcast::operator =(
        AttitudeBroadcast&& x) noexcept
{

    m_gap = x.m_gap;
    m_seconds = x.m_seconds;
    m_microseconds = x.m_microseconds;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_Vroll = x.m_Vroll;
    m_Vpitch = x.m_Vpitch;
    m_Vyaw = x.m_Vyaw;
    return *this;
}

bool AttitudeBroadcast::operator ==(
        const AttitudeBroadcast& x) const
{
    return (m_gap == x.m_gap &&
           m_seconds == x.m_seconds &&
           m_microseconds == x.m_microseconds &&
           m_roll == x.m_roll &&
           m_pitch == x.m_pitch &&
           m_yaw == x.m_yaw &&
           m_Vroll == x.m_Vroll &&
           m_Vpitch == x.m_Vpitch &&
           m_Vyaw == x.m_Vyaw);
}

bool AttitudeBroadcast::operator !=(
        const AttitudeBroadcast& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member gap
 * @param _gap New value for member gap
 */
void AttitudeBroadcast::gap(
        uint8_t _gap)
{
    m_gap = _gap;
}

/*!
 * @brief This function returns the value of member gap
 * @return Value of member gap
 */
uint8_t AttitudeBroadcast::gap() const
{
    return m_gap;
}

/*!
 * @brief This function returns a reference to member gap
 * @return Reference to member gap
 */
uint8_t& AttitudeBroadcast::gap()
{
    return m_gap;
}


/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void AttitudeBroadcast::seconds(
        uint32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
uint32_t AttitudeBroadcast::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
uint32_t& AttitudeBroadcast::seconds()
{
    return m_seconds;
}


/*!
 * @brief This function sets a value in member microseconds
 * @param _microseconds New value for member microseconds
 */
void AttitudeBroadcast::microseconds(
        uint32_t _microseconds)
{
    m_microseconds = _microseconds;
}

/*!
 * @brief This function returns the value of member microseconds
 * @return Value of member microseconds
 */
uint32_t AttitudeBroadcast::microseconds() const
{
    return m_microseconds;
}

/*!
 * @brief This function returns a reference to member microseconds
 * @return Reference to member microseconds
 */
uint32_t& AttitudeBroadcast::microseconds()
{
    return m_microseconds;
}


/*!
 * @brief This function sets a value in member roll
 * @param _roll New value for member roll
 */
void AttitudeBroadcast::roll(
        float _roll)
{
    m_roll = _roll;
}

/*!
 * @brief This function returns the value of member roll
 * @return Value of member roll
 */
float AttitudeBroadcast::roll() const
{
    return m_roll;
}

/*!
 * @brief This function returns a reference to member roll
 * @return Reference to member roll
 */
float& AttitudeBroadcast::roll()
{
    return m_roll;
}


/*!
 * @brief This function sets a value in member pitch
 * @param _pitch New value for member pitch
 */
void AttitudeBroadcast::pitch(
        float _pitch)
{
    m_pitch = _pitch;
}

/*!
 * @brief This function returns the value of member pitch
 * @return Value of member pitch
 */
float AttitudeBroadcast::pitch() const
{
    return m_pitch;
}

/*!
 * @brief This function returns a reference to member pitch
 * @return Reference to member pitch
 */
float& AttitudeBroadcast::pitch()
{
    return m_pitch;
}


/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void AttitudeBroadcast::yaw(
        float _yaw)
{
    m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
float AttitudeBroadcast::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
float& AttitudeBroadcast::yaw()
{
    return m_yaw;
}


/*!
 * @brief This function sets a value in member Vroll
 * @param _Vroll New value for member Vroll
 */
void AttitudeBroadcast::Vroll(
        float _Vroll)
{
    m_Vroll = _Vroll;
}

/*!
 * @brief This function returns the value of member Vroll
 * @return Value of member Vroll
 */
float AttitudeBroadcast::Vroll() const
{
    return m_Vroll;
}

/*!
 * @brief This function returns a reference to member Vroll
 * @return Reference to member Vroll
 */
float& AttitudeBroadcast::Vroll()
{
    return m_Vroll;
}


/*!
 * @brief This function sets a value in member Vpitch
 * @param _Vpitch New value for member Vpitch
 */
void AttitudeBroadcast::Vpitch(
        float _Vpitch)
{
    m_Vpitch = _Vpitch;
}

/*!
 * @brief This function returns the value of member Vpitch
 * @return Value of member Vpitch
 */
float AttitudeBroadcast::Vpitch() const
{
    return m_Vpitch;
}

/*!
 * @brief This function returns a reference to member Vpitch
 * @return Reference to member Vpitch
 */
float& AttitudeBroadcast::Vpitch()
{
    return m_Vpitch;
}


/*!
 * @brief This function sets a value in member Vyaw
 * @param _Vyaw New value for member Vyaw
 */
void AttitudeBroadcast::Vyaw(
        float _Vyaw)
{
    m_Vyaw = _Vyaw;
}

/*!
 * @brief This function returns the value of member Vyaw
 * @return Value of member Vyaw
 */
float AttitudeBroadcast::Vyaw() const
{
    return m_Vyaw;
}

/*!
 * @brief This function returns a reference to member Vyaw
 * @return Reference to member Vyaw
 */
float& AttitudeBroadcast::Vyaw()
{
    return m_Vyaw;
}




TrackPredict::TrackPredict()
{
}

TrackPredict::~TrackPredict()
{
}

TrackPredict::TrackPredict(
        const TrackPredict& x)
{
    m_number = x.m_number;
    m_timestamp = x.m_timestamp;
    m_locX = x.m_locX;
    m_locY = x.m_locY;
    m_locZ = x.m_locZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
}

TrackPredict::TrackPredict(
        TrackPredict&& x) noexcept
{
    m_number = x.m_number;
    m_timestamp = x.m_timestamp;
    m_locX = x.m_locX;
    m_locY = x.m_locY;
    m_locZ = x.m_locZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
}

TrackPredict& TrackPredict::operator =(
        const TrackPredict& x)
{

    m_number = x.m_number;
    m_timestamp = x.m_timestamp;
    m_locX = x.m_locX;
    m_locY = x.m_locY;
    m_locZ = x.m_locZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    return *this;
}

TrackPredict& TrackPredict::operator =(
        TrackPredict&& x) noexcept
{

    m_number = x.m_number;
    m_timestamp = x.m_timestamp;
    m_locX = x.m_locX;
    m_locY = x.m_locY;
    m_locZ = x.m_locZ;
    m_speedX = x.m_speedX;
    m_speedY = x.m_speedY;
    m_speedZ = x.m_speedZ;
    return *this;
}

bool TrackPredict::operator ==(
        const TrackPredict& x) const
{
    return (m_number == x.m_number &&
           m_timestamp == x.m_timestamp &&
           m_locX == x.m_locX &&
           m_locY == x.m_locY &&
           m_locZ == x.m_locZ &&
           m_speedX == x.m_speedX &&
           m_speedY == x.m_speedY &&
           m_speedZ == x.m_speedZ);
}

bool TrackPredict::operator !=(
        const TrackPredict& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member number
 * @param _number New value for member number
 */
void TrackPredict::number(
        uint8_t _number)
{
    m_number = _number;
}

/*!
 * @brief This function returns the value of member number
 * @return Value of member number
 */
uint8_t TrackPredict::number() const
{
    return m_number;
}

/*!
 * @brief This function returns a reference to member number
 * @return Reference to member number
 */
uint8_t& TrackPredict::number()
{
    return m_number;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void TrackPredict::timestamp(
        uint32_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint32_t TrackPredict::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint32_t& TrackPredict::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member locX
 * @param _locX New value for member locX
 */
void TrackPredict::locX(
        uint32_t _locX)
{
    m_locX = _locX;
}

/*!
 * @brief This function returns the value of member locX
 * @return Value of member locX
 */
uint32_t TrackPredict::locX() const
{
    return m_locX;
}

/*!
 * @brief This function returns a reference to member locX
 * @return Reference to member locX
 */
uint32_t& TrackPredict::locX()
{
    return m_locX;
}


/*!
 * @brief This function sets a value in member locY
 * @param _locY New value for member locY
 */
void TrackPredict::locY(
        uint32_t _locY)
{
    m_locY = _locY;
}

/*!
 * @brief This function returns the value of member locY
 * @return Value of member locY
 */
uint32_t TrackPredict::locY() const
{
    return m_locY;
}

/*!
 * @brief This function returns a reference to member locY
 * @return Reference to member locY
 */
uint32_t& TrackPredict::locY()
{
    return m_locY;
}


/*!
 * @brief This function sets a value in member locZ
 * @param _locZ New value for member locZ
 */
void TrackPredict::locZ(
        uint32_t _locZ)
{
    m_locZ = _locZ;
}

/*!
 * @brief This function returns the value of member locZ
 * @return Value of member locZ
 */
uint32_t TrackPredict::locZ() const
{
    return m_locZ;
}

/*!
 * @brief This function returns a reference to member locZ
 * @return Reference to member locZ
 */
uint32_t& TrackPredict::locZ()
{
    return m_locZ;
}


/*!
 * @brief This function sets a value in member speedX
 * @param _speedX New value for member speedX
 */
void TrackPredict::speedX(
        uint32_t _speedX)
{
    m_speedX = _speedX;
}

/*!
 * @brief This function returns the value of member speedX
 * @return Value of member speedX
 */
uint32_t TrackPredict::speedX() const
{
    return m_speedX;
}

/*!
 * @brief This function returns a reference to member speedX
 * @return Reference to member speedX
 */
uint32_t& TrackPredict::speedX()
{
    return m_speedX;
}


/*!
 * @brief This function sets a value in member speedY
 * @param _speedY New value for member speedY
 */
void TrackPredict::speedY(
        uint32_t _speedY)
{
    m_speedY = _speedY;
}

/*!
 * @brief This function returns the value of member speedY
 * @return Value of member speedY
 */
uint32_t TrackPredict::speedY() const
{
    return m_speedY;
}

/*!
 * @brief This function returns a reference to member speedY
 * @return Reference to member speedY
 */
uint32_t& TrackPredict::speedY()
{
    return m_speedY;
}


/*!
 * @brief This function sets a value in member speedZ
 * @param _speedZ New value for member speedZ
 */
void TrackPredict::speedZ(
        uint32_t _speedZ)
{
    m_speedZ = _speedZ;
}

/*!
 * @brief This function returns the value of member speedZ
 * @return Value of member speedZ
 */
uint32_t TrackPredict::speedZ() const
{
    return m_speedZ;
}

/*!
 * @brief This function returns a reference to member speedZ
 * @return Reference to member speedZ
 */
uint32_t& TrackPredict::speedZ()
{
    return m_speedZ;
}




TelemetryRequest::TelemetryRequest()
{
}

TelemetryRequest::~TelemetryRequest()
{
}

TelemetryRequest::TelemetryRequest(
        const TelemetryRequest& x)
{
    m_number = x.m_number;
    m_command = x.m_command;
}

TelemetryRequest::TelemetryRequest(
        TelemetryRequest&& x) noexcept
{
    m_number = x.m_number;
    m_command = std::move(x.m_command);
}

TelemetryRequest& TelemetryRequest::operator =(
        const TelemetryRequest& x)
{

    m_number = x.m_number;
    m_command = x.m_command;
    return *this;
}

TelemetryRequest& TelemetryRequest::operator =(
        TelemetryRequest&& x) noexcept
{

    m_number = x.m_number;
    m_command = std::move(x.m_command);
    return *this;
}

bool TelemetryRequest::operator ==(
        const TelemetryRequest& x) const
{
    return (m_number == x.m_number &&
           m_command == x.m_command);
}

bool TelemetryRequest::operator !=(
        const TelemetryRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member number
 * @param _number New value for member number
 */
void TelemetryRequest::number(
        uint8_t _number)
{
    m_number = _number;
}

/*!
 * @brief This function returns the value of member number
 * @return Value of member number
 */
uint8_t TelemetryRequest::number() const
{
    return m_number;
}

/*!
 * @brief This function returns a reference to member number
 * @return Reference to member number
 */
uint8_t& TelemetryRequest::number()
{
    return m_number;
}


/*!
 * @brief This function copies the value in member command
 * @param _command New value to be copied in member command
 */
void TelemetryRequest::command(
        const std::array<uint8_t, 6>& _command)
{
    m_command = _command;
}

/*!
 * @brief This function moves the value in member command
 * @param _command New value to be moved in member command
 */
void TelemetryRequest::command(
        std::array<uint8_t, 6>&& _command)
{
    m_command = std::move(_command);
}

/*!
 * @brief This function returns a constant reference to member command
 * @return Constant reference to member command
 */
const std::array<uint8_t, 6>& TelemetryRequest::command() const
{
    return m_command;
}

/*!
 * @brief This function returns a reference to member command
 * @return Reference to member command
 */
std::array<uint8_t, 6>& TelemetryRequest::command()
{
    return m_command;
}




TelemetryReply::TelemetryReply()
{
}

TelemetryReply::~TelemetryReply()
{
}

TelemetryReply::TelemetryReply(
        const TelemetryReply& x)
{
    m_loctime4 = x.m_loctime4;
    m_loctime3 = x.m_loctime3;
    m_loctime2 = x.m_loctime2;
    m_loctime1 = x.m_loctime1;
    m_sysState = x.m_sysState;
    m_commandCnt = x.m_commandCnt;
    m_busSignature = x.m_busSignature;
    m_subsysState = x.m_subsysState;
    m_imgMode = x.m_imgMode;
    m_startTimeHigh = x.m_startTimeHigh;
    m_startTimeLow = x.m_startTimeLow;
    m_subbandCont = x.m_subbandCont;
    m_argTelemetry1 = x.m_argTelemetry1;
    m_taskNumber = x.m_taskNumber;
    m_cmdQueueLength = x.m_cmdQueueLength;
    m_digitalTelemetry1 = x.m_digitalTelemetry1;
    m_digitalTelemetry2 = x.m_digitalTelemetry2;
    m_power100M = x.m_power100M;
    m_RFFM = x.m_RFFM;
    m_RFamplify = x.m_RFamplify;
    m_RFoscillate = x.m_RFoscillate;
    m_RFmainOsc5v = x.m_RFmainOsc5v;
    m_RFbackOsc5v = x.m_RFbackOsc5v;
    m_RFmain8p5v = x.m_RFmain8p5v;
    m_RFback8p5v = x.m_RFback8p5v;
    m_RFmain5v = x.m_RFmain5v;
    m_RFback5v = x.m_RFback5v;
    m_captureMain5v = x.m_captureMain5v;
    m_captureBack5v = x.m_captureBack5v;
    m_controlMain5v = x.m_controlMain5v;
    m_controlBack5v = x.m_controlBack5v;
    m_realMod1 = x.m_realMod1;
    m_realMod2 = x.m_realMod2;
    m_realMod3 = x.m_realMod3;
    m_realMod4 = x.m_realMod4;
    m_argTelemetry2 = x.m_argTelemetry2;
    m_argTelemetry3 = x.m_argTelemetry3;
    m_argTelemetry4 = x.m_argTelemetry4;
    m_argTelemetry5 = x.m_argTelemetry5;
    m_argTelemetry6 = x.m_argTelemetry6;
}

TelemetryReply::TelemetryReply(
        TelemetryReply&& x) noexcept
{
    m_loctime4 = x.m_loctime4;
    m_loctime3 = x.m_loctime3;
    m_loctime2 = x.m_loctime2;
    m_loctime1 = x.m_loctime1;
    m_sysState = x.m_sysState;
    m_commandCnt = x.m_commandCnt;
    m_busSignature = x.m_busSignature;
    m_subsysState = x.m_subsysState;
    m_imgMode = x.m_imgMode;
    m_startTimeHigh = x.m_startTimeHigh;
    m_startTimeLow = x.m_startTimeLow;
    m_subbandCont = x.m_subbandCont;
    m_argTelemetry1 = x.m_argTelemetry1;
    m_taskNumber = x.m_taskNumber;
    m_cmdQueueLength = x.m_cmdQueueLength;
    m_digitalTelemetry1 = x.m_digitalTelemetry1;
    m_digitalTelemetry2 = x.m_digitalTelemetry2;
    m_power100M = x.m_power100M;
    m_RFFM = x.m_RFFM;
    m_RFamplify = x.m_RFamplify;
    m_RFoscillate = x.m_RFoscillate;
    m_RFmainOsc5v = x.m_RFmainOsc5v;
    m_RFbackOsc5v = x.m_RFbackOsc5v;
    m_RFmain8p5v = x.m_RFmain8p5v;
    m_RFback8p5v = x.m_RFback8p5v;
    m_RFmain5v = x.m_RFmain5v;
    m_RFback5v = x.m_RFback5v;
    m_captureMain5v = x.m_captureMain5v;
    m_captureBack5v = x.m_captureBack5v;
    m_controlMain5v = x.m_controlMain5v;
    m_controlBack5v = x.m_controlBack5v;
    m_realMod1 = x.m_realMod1;
    m_realMod2 = x.m_realMod2;
    m_realMod3 = x.m_realMod3;
    m_realMod4 = x.m_realMod4;
    m_argTelemetry2 = x.m_argTelemetry2;
    m_argTelemetry3 = x.m_argTelemetry3;
    m_argTelemetry4 = x.m_argTelemetry4;
    m_argTelemetry5 = x.m_argTelemetry5;
    m_argTelemetry6 = x.m_argTelemetry6;
}

TelemetryReply& TelemetryReply::operator =(
        const TelemetryReply& x)
{

    m_loctime4 = x.m_loctime4;
    m_loctime3 = x.m_loctime3;
    m_loctime2 = x.m_loctime2;
    m_loctime1 = x.m_loctime1;
    m_sysState = x.m_sysState;
    m_commandCnt = x.m_commandCnt;
    m_busSignature = x.m_busSignature;
    m_subsysState = x.m_subsysState;
    m_imgMode = x.m_imgMode;
    m_startTimeHigh = x.m_startTimeHigh;
    m_startTimeLow = x.m_startTimeLow;
    m_subbandCont = x.m_subbandCont;
    m_argTelemetry1 = x.m_argTelemetry1;
    m_taskNumber = x.m_taskNumber;
    m_cmdQueueLength = x.m_cmdQueueLength;
    m_digitalTelemetry1 = x.m_digitalTelemetry1;
    m_digitalTelemetry2 = x.m_digitalTelemetry2;
    m_power100M = x.m_power100M;
    m_RFFM = x.m_RFFM;
    m_RFamplify = x.m_RFamplify;
    m_RFoscillate = x.m_RFoscillate;
    m_RFmainOsc5v = x.m_RFmainOsc5v;
    m_RFbackOsc5v = x.m_RFbackOsc5v;
    m_RFmain8p5v = x.m_RFmain8p5v;
    m_RFback8p5v = x.m_RFback8p5v;
    m_RFmain5v = x.m_RFmain5v;
    m_RFback5v = x.m_RFback5v;
    m_captureMain5v = x.m_captureMain5v;
    m_captureBack5v = x.m_captureBack5v;
    m_controlMain5v = x.m_controlMain5v;
    m_controlBack5v = x.m_controlBack5v;
    m_realMod1 = x.m_realMod1;
    m_realMod2 = x.m_realMod2;
    m_realMod3 = x.m_realMod3;
    m_realMod4 = x.m_realMod4;
    m_argTelemetry2 = x.m_argTelemetry2;
    m_argTelemetry3 = x.m_argTelemetry3;
    m_argTelemetry4 = x.m_argTelemetry4;
    m_argTelemetry5 = x.m_argTelemetry5;
    m_argTelemetry6 = x.m_argTelemetry6;
    return *this;
}

TelemetryReply& TelemetryReply::operator =(
        TelemetryReply&& x) noexcept
{

    m_loctime4 = x.m_loctime4;
    m_loctime3 = x.m_loctime3;
    m_loctime2 = x.m_loctime2;
    m_loctime1 = x.m_loctime1;
    m_sysState = x.m_sysState;
    m_commandCnt = x.m_commandCnt;
    m_busSignature = x.m_busSignature;
    m_subsysState = x.m_subsysState;
    m_imgMode = x.m_imgMode;
    m_startTimeHigh = x.m_startTimeHigh;
    m_startTimeLow = x.m_startTimeLow;
    m_subbandCont = x.m_subbandCont;
    m_argTelemetry1 = x.m_argTelemetry1;
    m_taskNumber = x.m_taskNumber;
    m_cmdQueueLength = x.m_cmdQueueLength;
    m_digitalTelemetry1 = x.m_digitalTelemetry1;
    m_digitalTelemetry2 = x.m_digitalTelemetry2;
    m_power100M = x.m_power100M;
    m_RFFM = x.m_RFFM;
    m_RFamplify = x.m_RFamplify;
    m_RFoscillate = x.m_RFoscillate;
    m_RFmainOsc5v = x.m_RFmainOsc5v;
    m_RFbackOsc5v = x.m_RFbackOsc5v;
    m_RFmain8p5v = x.m_RFmain8p5v;
    m_RFback8p5v = x.m_RFback8p5v;
    m_RFmain5v = x.m_RFmain5v;
    m_RFback5v = x.m_RFback5v;
    m_captureMain5v = x.m_captureMain5v;
    m_captureBack5v = x.m_captureBack5v;
    m_controlMain5v = x.m_controlMain5v;
    m_controlBack5v = x.m_controlBack5v;
    m_realMod1 = x.m_realMod1;
    m_realMod2 = x.m_realMod2;
    m_realMod3 = x.m_realMod3;
    m_realMod4 = x.m_realMod4;
    m_argTelemetry2 = x.m_argTelemetry2;
    m_argTelemetry3 = x.m_argTelemetry3;
    m_argTelemetry4 = x.m_argTelemetry4;
    m_argTelemetry5 = x.m_argTelemetry5;
    m_argTelemetry6 = x.m_argTelemetry6;
    return *this;
}

bool TelemetryReply::operator ==(
        const TelemetryReply& x) const
{
    return (m_loctime4 == x.m_loctime4 &&
           m_loctime3 == x.m_loctime3 &&
           m_loctime2 == x.m_loctime2 &&
           m_loctime1 == x.m_loctime1 &&
           m_sysState == x.m_sysState &&
           m_commandCnt == x.m_commandCnt &&
           m_busSignature == x.m_busSignature &&
           m_subsysState == x.m_subsysState &&
           m_imgMode == x.m_imgMode &&
           m_startTimeHigh == x.m_startTimeHigh &&
           m_startTimeLow == x.m_startTimeLow &&
           m_subbandCont == x.m_subbandCont &&
           m_argTelemetry1 == x.m_argTelemetry1 &&
           m_taskNumber == x.m_taskNumber &&
           m_cmdQueueLength == x.m_cmdQueueLength &&
           m_digitalTelemetry1 == x.m_digitalTelemetry1 &&
           m_digitalTelemetry2 == x.m_digitalTelemetry2 &&
           m_power100M == x.m_power100M &&
           m_RFFM == x.m_RFFM &&
           m_RFamplify == x.m_RFamplify &&
           m_RFoscillate == x.m_RFoscillate &&
           m_RFmainOsc5v == x.m_RFmainOsc5v &&
           m_RFbackOsc5v == x.m_RFbackOsc5v &&
           m_RFmain8p5v == x.m_RFmain8p5v &&
           m_RFback8p5v == x.m_RFback8p5v &&
           m_RFmain5v == x.m_RFmain5v &&
           m_RFback5v == x.m_RFback5v &&
           m_captureMain5v == x.m_captureMain5v &&
           m_captureBack5v == x.m_captureBack5v &&
           m_controlMain5v == x.m_controlMain5v &&
           m_controlBack5v == x.m_controlBack5v &&
           m_realMod1 == x.m_realMod1 &&
           m_realMod2 == x.m_realMod2 &&
           m_realMod3 == x.m_realMod3 &&
           m_realMod4 == x.m_realMod4 &&
           m_argTelemetry2 == x.m_argTelemetry2 &&
           m_argTelemetry3 == x.m_argTelemetry3 &&
           m_argTelemetry4 == x.m_argTelemetry4 &&
           m_argTelemetry5 == x.m_argTelemetry5 &&
           m_argTelemetry6 == x.m_argTelemetry6);
}

bool TelemetryReply::operator !=(
        const TelemetryReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member loctime4
 * @param _loctime4 New value for member loctime4
 */
void TelemetryReply::loctime4(
        uint8_t _loctime4)
{
    m_loctime4 = _loctime4;
}

/*!
 * @brief This function returns the value of member loctime4
 * @return Value of member loctime4
 */
uint8_t TelemetryReply::loctime4() const
{
    return m_loctime4;
}

/*!
 * @brief This function returns a reference to member loctime4
 * @return Reference to member loctime4
 */
uint8_t& TelemetryReply::loctime4()
{
    return m_loctime4;
}


/*!
 * @brief This function sets a value in member loctime3
 * @param _loctime3 New value for member loctime3
 */
void TelemetryReply::loctime3(
        uint8_t _loctime3)
{
    m_loctime3 = _loctime3;
}

/*!
 * @brief This function returns the value of member loctime3
 * @return Value of member loctime3
 */
uint8_t TelemetryReply::loctime3() const
{
    return m_loctime3;
}

/*!
 * @brief This function returns a reference to member loctime3
 * @return Reference to member loctime3
 */
uint8_t& TelemetryReply::loctime3()
{
    return m_loctime3;
}


/*!
 * @brief This function sets a value in member loctime2
 * @param _loctime2 New value for member loctime2
 */
void TelemetryReply::loctime2(
        uint8_t _loctime2)
{
    m_loctime2 = _loctime2;
}

/*!
 * @brief This function returns the value of member loctime2
 * @return Value of member loctime2
 */
uint8_t TelemetryReply::loctime2() const
{
    return m_loctime2;
}

/*!
 * @brief This function returns a reference to member loctime2
 * @return Reference to member loctime2
 */
uint8_t& TelemetryReply::loctime2()
{
    return m_loctime2;
}


/*!
 * @brief This function sets a value in member loctime1
 * @param _loctime1 New value for member loctime1
 */
void TelemetryReply::loctime1(
        uint8_t _loctime1)
{
    m_loctime1 = _loctime1;
}

/*!
 * @brief This function returns the value of member loctime1
 * @return Value of member loctime1
 */
uint8_t TelemetryReply::loctime1() const
{
    return m_loctime1;
}

/*!
 * @brief This function returns a reference to member loctime1
 * @return Reference to member loctime1
 */
uint8_t& TelemetryReply::loctime1()
{
    return m_loctime1;
}


/*!
 * @brief This function sets a value in member sysState
 * @param _sysState New value for member sysState
 */
void TelemetryReply::sysState(
        uint8_t _sysState)
{
    m_sysState = _sysState;
}

/*!
 * @brief This function returns the value of member sysState
 * @return Value of member sysState
 */
uint8_t TelemetryReply::sysState() const
{
    return m_sysState;
}

/*!
 * @brief This function returns a reference to member sysState
 * @return Reference to member sysState
 */
uint8_t& TelemetryReply::sysState()
{
    return m_sysState;
}


/*!
 * @brief This function sets a value in member commandCnt
 * @param _commandCnt New value for member commandCnt
 */
void TelemetryReply::commandCnt(
        uint8_t _commandCnt)
{
    m_commandCnt = _commandCnt;
}

/*!
 * @brief This function returns the value of member commandCnt
 * @return Value of member commandCnt
 */
uint8_t TelemetryReply::commandCnt() const
{
    return m_commandCnt;
}

/*!
 * @brief This function returns a reference to member commandCnt
 * @return Reference to member commandCnt
 */
uint8_t& TelemetryReply::commandCnt()
{
    return m_commandCnt;
}


/*!
 * @brief This function sets a value in member busSignature
 * @param _busSignature New value for member busSignature
 */
void TelemetryReply::busSignature(
        uint8_t _busSignature)
{
    m_busSignature = _busSignature;
}

/*!
 * @brief This function returns the value of member busSignature
 * @return Value of member busSignature
 */
uint8_t TelemetryReply::busSignature() const
{
    return m_busSignature;
}

/*!
 * @brief This function returns a reference to member busSignature
 * @return Reference to member busSignature
 */
uint8_t& TelemetryReply::busSignature()
{
    return m_busSignature;
}


/*!
 * @brief This function sets a value in member subsysState
 * @param _subsysState New value for member subsysState
 */
void TelemetryReply::subsysState(
        uint8_t _subsysState)
{
    m_subsysState = _subsysState;
}

/*!
 * @brief This function returns the value of member subsysState
 * @return Value of member subsysState
 */
uint8_t TelemetryReply::subsysState() const
{
    return m_subsysState;
}

/*!
 * @brief This function returns a reference to member subsysState
 * @return Reference to member subsysState
 */
uint8_t& TelemetryReply::subsysState()
{
    return m_subsysState;
}


/*!
 * @brief This function sets a value in member imgMode
 * @param _imgMode New value for member imgMode
 */
void TelemetryReply::imgMode(
        uint8_t _imgMode)
{
    m_imgMode = _imgMode;
}

/*!
 * @brief This function returns the value of member imgMode
 * @return Value of member imgMode
 */
uint8_t TelemetryReply::imgMode() const
{
    return m_imgMode;
}

/*!
 * @brief This function returns a reference to member imgMode
 * @return Reference to member imgMode
 */
uint8_t& TelemetryReply::imgMode()
{
    return m_imgMode;
}


/*!
 * @brief This function sets a value in member startTimeHigh
 * @param _startTimeHigh New value for member startTimeHigh
 */
void TelemetryReply::startTimeHigh(
        uint8_t _startTimeHigh)
{
    m_startTimeHigh = _startTimeHigh;
}

/*!
 * @brief This function returns the value of member startTimeHigh
 * @return Value of member startTimeHigh
 */
uint8_t TelemetryReply::startTimeHigh() const
{
    return m_startTimeHigh;
}

/*!
 * @brief This function returns a reference to member startTimeHigh
 * @return Reference to member startTimeHigh
 */
uint8_t& TelemetryReply::startTimeHigh()
{
    return m_startTimeHigh;
}


/*!
 * @brief This function sets a value in member startTimeLow
 * @param _startTimeLow New value for member startTimeLow
 */
void TelemetryReply::startTimeLow(
        uint8_t _startTimeLow)
{
    m_startTimeLow = _startTimeLow;
}

/*!
 * @brief This function returns the value of member startTimeLow
 * @return Value of member startTimeLow
 */
uint8_t TelemetryReply::startTimeLow() const
{
    return m_startTimeLow;
}

/*!
 * @brief This function returns a reference to member startTimeLow
 * @return Reference to member startTimeLow
 */
uint8_t& TelemetryReply::startTimeLow()
{
    return m_startTimeLow;
}


/*!
 * @brief This function sets a value in member subbandCont
 * @param _subbandCont New value for member subbandCont
 */
void TelemetryReply::subbandCont(
        uint8_t _subbandCont)
{
    m_subbandCont = _subbandCont;
}

/*!
 * @brief This function returns the value of member subbandCont
 * @return Value of member subbandCont
 */
uint8_t TelemetryReply::subbandCont() const
{
    return m_subbandCont;
}

/*!
 * @brief This function returns a reference to member subbandCont
 * @return Reference to member subbandCont
 */
uint8_t& TelemetryReply::subbandCont()
{
    return m_subbandCont;
}


/*!
 * @brief This function sets a value in member argTelemetry1
 * @param _argTelemetry1 New value for member argTelemetry1
 */
void TelemetryReply::argTelemetry1(
        uint8_t _argTelemetry1)
{
    m_argTelemetry1 = _argTelemetry1;
}

/*!
 * @brief This function returns the value of member argTelemetry1
 * @return Value of member argTelemetry1
 */
uint8_t TelemetryReply::argTelemetry1() const
{
    return m_argTelemetry1;
}

/*!
 * @brief This function returns a reference to member argTelemetry1
 * @return Reference to member argTelemetry1
 */
uint8_t& TelemetryReply::argTelemetry1()
{
    return m_argTelemetry1;
}


/*!
 * @brief This function sets a value in member taskNumber
 * @param _taskNumber New value for member taskNumber
 */
void TelemetryReply::taskNumber(
        uint8_t _taskNumber)
{
    m_taskNumber = _taskNumber;
}

/*!
 * @brief This function returns the value of member taskNumber
 * @return Value of member taskNumber
 */
uint8_t TelemetryReply::taskNumber() const
{
    return m_taskNumber;
}

/*!
 * @brief This function returns a reference to member taskNumber
 * @return Reference to member taskNumber
 */
uint8_t& TelemetryReply::taskNumber()
{
    return m_taskNumber;
}


/*!
 * @brief This function sets a value in member cmdQueueLength
 * @param _cmdQueueLength New value for member cmdQueueLength
 */
void TelemetryReply::cmdQueueLength(
        uint8_t _cmdQueueLength)
{
    m_cmdQueueLength = _cmdQueueLength;
}

/*!
 * @brief This function returns the value of member cmdQueueLength
 * @return Value of member cmdQueueLength
 */
uint8_t TelemetryReply::cmdQueueLength() const
{
    return m_cmdQueueLength;
}

/*!
 * @brief This function returns a reference to member cmdQueueLength
 * @return Reference to member cmdQueueLength
 */
uint8_t& TelemetryReply::cmdQueueLength()
{
    return m_cmdQueueLength;
}


/*!
 * @brief This function sets a value in member digitalTelemetry1
 * @param _digitalTelemetry1 New value for member digitalTelemetry1
 */
void TelemetryReply::digitalTelemetry1(
        uint8_t _digitalTelemetry1)
{
    m_digitalTelemetry1 = _digitalTelemetry1;
}

/*!
 * @brief This function returns the value of member digitalTelemetry1
 * @return Value of member digitalTelemetry1
 */
uint8_t TelemetryReply::digitalTelemetry1() const
{
    return m_digitalTelemetry1;
}

/*!
 * @brief This function returns a reference to member digitalTelemetry1
 * @return Reference to member digitalTelemetry1
 */
uint8_t& TelemetryReply::digitalTelemetry1()
{
    return m_digitalTelemetry1;
}


/*!
 * @brief This function sets a value in member digitalTelemetry2
 * @param _digitalTelemetry2 New value for member digitalTelemetry2
 */
void TelemetryReply::digitalTelemetry2(
        uint8_t _digitalTelemetry2)
{
    m_digitalTelemetry2 = _digitalTelemetry2;
}

/*!
 * @brief This function returns the value of member digitalTelemetry2
 * @return Value of member digitalTelemetry2
 */
uint8_t TelemetryReply::digitalTelemetry2() const
{
    return m_digitalTelemetry2;
}

/*!
 * @brief This function returns a reference to member digitalTelemetry2
 * @return Reference to member digitalTelemetry2
 */
uint8_t& TelemetryReply::digitalTelemetry2()
{
    return m_digitalTelemetry2;
}


/*!
 * @brief This function sets a value in member power100M
 * @param _power100M New value for member power100M
 */
void TelemetryReply::power100M(
        uint8_t _power100M)
{
    m_power100M = _power100M;
}

/*!
 * @brief This function returns the value of member power100M
 * @return Value of member power100M
 */
uint8_t TelemetryReply::power100M() const
{
    return m_power100M;
}

/*!
 * @brief This function returns a reference to member power100M
 * @return Reference to member power100M
 */
uint8_t& TelemetryReply::power100M()
{
    return m_power100M;
}


/*!
 * @brief This function sets a value in member RFFM
 * @param _RFFM New value for member RFFM
 */
void TelemetryReply::RFFM(
        uint8_t _RFFM)
{
    m_RFFM = _RFFM;
}

/*!
 * @brief This function returns the value of member RFFM
 * @return Value of member RFFM
 */
uint8_t TelemetryReply::RFFM() const
{
    return m_RFFM;
}

/*!
 * @brief This function returns a reference to member RFFM
 * @return Reference to member RFFM
 */
uint8_t& TelemetryReply::RFFM()
{
    return m_RFFM;
}


/*!
 * @brief This function sets a value in member RFamplify
 * @param _RFamplify New value for member RFamplify
 */
void TelemetryReply::RFamplify(
        uint8_t _RFamplify)
{
    m_RFamplify = _RFamplify;
}

/*!
 * @brief This function returns the value of member RFamplify
 * @return Value of member RFamplify
 */
uint8_t TelemetryReply::RFamplify() const
{
    return m_RFamplify;
}

/*!
 * @brief This function returns a reference to member RFamplify
 * @return Reference to member RFamplify
 */
uint8_t& TelemetryReply::RFamplify()
{
    return m_RFamplify;
}


/*!
 * @brief This function sets a value in member RFoscillate
 * @param _RFoscillate New value for member RFoscillate
 */
void TelemetryReply::RFoscillate(
        uint8_t _RFoscillate)
{
    m_RFoscillate = _RFoscillate;
}

/*!
 * @brief This function returns the value of member RFoscillate
 * @return Value of member RFoscillate
 */
uint8_t TelemetryReply::RFoscillate() const
{
    return m_RFoscillate;
}

/*!
 * @brief This function returns a reference to member RFoscillate
 * @return Reference to member RFoscillate
 */
uint8_t& TelemetryReply::RFoscillate()
{
    return m_RFoscillate;
}


/*!
 * @brief This function sets a value in member RFmainOsc5v
 * @param _RFmainOsc5v New value for member RFmainOsc5v
 */
void TelemetryReply::RFmainOsc5v(
        uint8_t _RFmainOsc5v)
{
    m_RFmainOsc5v = _RFmainOsc5v;
}

/*!
 * @brief This function returns the value of member RFmainOsc5v
 * @return Value of member RFmainOsc5v
 */
uint8_t TelemetryReply::RFmainOsc5v() const
{
    return m_RFmainOsc5v;
}

/*!
 * @brief This function returns a reference to member RFmainOsc5v
 * @return Reference to member RFmainOsc5v
 */
uint8_t& TelemetryReply::RFmainOsc5v()
{
    return m_RFmainOsc5v;
}


/*!
 * @brief This function sets a value in member RFbackOsc5v
 * @param _RFbackOsc5v New value for member RFbackOsc5v
 */
void TelemetryReply::RFbackOsc5v(
        uint8_t _RFbackOsc5v)
{
    m_RFbackOsc5v = _RFbackOsc5v;
}

/*!
 * @brief This function returns the value of member RFbackOsc5v
 * @return Value of member RFbackOsc5v
 */
uint8_t TelemetryReply::RFbackOsc5v() const
{
    return m_RFbackOsc5v;
}

/*!
 * @brief This function returns a reference to member RFbackOsc5v
 * @return Reference to member RFbackOsc5v
 */
uint8_t& TelemetryReply::RFbackOsc5v()
{
    return m_RFbackOsc5v;
}


/*!
 * @brief This function sets a value in member RFmain8p5v
 * @param _RFmain8p5v New value for member RFmain8p5v
 */
void TelemetryReply::RFmain8p5v(
        uint8_t _RFmain8p5v)
{
    m_RFmain8p5v = _RFmain8p5v;
}

/*!
 * @brief This function returns the value of member RFmain8p5v
 * @return Value of member RFmain8p5v
 */
uint8_t TelemetryReply::RFmain8p5v() const
{
    return m_RFmain8p5v;
}

/*!
 * @brief This function returns a reference to member RFmain8p5v
 * @return Reference to member RFmain8p5v
 */
uint8_t& TelemetryReply::RFmain8p5v()
{
    return m_RFmain8p5v;
}


/*!
 * @brief This function sets a value in member RFback8p5v
 * @param _RFback8p5v New value for member RFback8p5v
 */
void TelemetryReply::RFback8p5v(
        uint8_t _RFback8p5v)
{
    m_RFback8p5v = _RFback8p5v;
}

/*!
 * @brief This function returns the value of member RFback8p5v
 * @return Value of member RFback8p5v
 */
uint8_t TelemetryReply::RFback8p5v() const
{
    return m_RFback8p5v;
}

/*!
 * @brief This function returns a reference to member RFback8p5v
 * @return Reference to member RFback8p5v
 */
uint8_t& TelemetryReply::RFback8p5v()
{
    return m_RFback8p5v;
}


/*!
 * @brief This function sets a value in member RFmain5v
 * @param _RFmain5v New value for member RFmain5v
 */
void TelemetryReply::RFmain5v(
        uint8_t _RFmain5v)
{
    m_RFmain5v = _RFmain5v;
}

/*!
 * @brief This function returns the value of member RFmain5v
 * @return Value of member RFmain5v
 */
uint8_t TelemetryReply::RFmain5v() const
{
    return m_RFmain5v;
}

/*!
 * @brief This function returns a reference to member RFmain5v
 * @return Reference to member RFmain5v
 */
uint8_t& TelemetryReply::RFmain5v()
{
    return m_RFmain5v;
}


/*!
 * @brief This function sets a value in member RFback5v
 * @param _RFback5v New value for member RFback5v
 */
void TelemetryReply::RFback5v(
        uint8_t _RFback5v)
{
    m_RFback5v = _RFback5v;
}

/*!
 * @brief This function returns the value of member RFback5v
 * @return Value of member RFback5v
 */
uint8_t TelemetryReply::RFback5v() const
{
    return m_RFback5v;
}

/*!
 * @brief This function returns a reference to member RFback5v
 * @return Reference to member RFback5v
 */
uint8_t& TelemetryReply::RFback5v()
{
    return m_RFback5v;
}


/*!
 * @brief This function sets a value in member captureMain5v
 * @param _captureMain5v New value for member captureMain5v
 */
void TelemetryReply::captureMain5v(
        uint8_t _captureMain5v)
{
    m_captureMain5v = _captureMain5v;
}

/*!
 * @brief This function returns the value of member captureMain5v
 * @return Value of member captureMain5v
 */
uint8_t TelemetryReply::captureMain5v() const
{
    return m_captureMain5v;
}

/*!
 * @brief This function returns a reference to member captureMain5v
 * @return Reference to member captureMain5v
 */
uint8_t& TelemetryReply::captureMain5v()
{
    return m_captureMain5v;
}


/*!
 * @brief This function sets a value in member captureBack5v
 * @param _captureBack5v New value for member captureBack5v
 */
void TelemetryReply::captureBack5v(
        uint8_t _captureBack5v)
{
    m_captureBack5v = _captureBack5v;
}

/*!
 * @brief This function returns the value of member captureBack5v
 * @return Value of member captureBack5v
 */
uint8_t TelemetryReply::captureBack5v() const
{
    return m_captureBack5v;
}

/*!
 * @brief This function returns a reference to member captureBack5v
 * @return Reference to member captureBack5v
 */
uint8_t& TelemetryReply::captureBack5v()
{
    return m_captureBack5v;
}


/*!
 * @brief This function sets a value in member controlMain5v
 * @param _controlMain5v New value for member controlMain5v
 */
void TelemetryReply::controlMain5v(
        uint8_t _controlMain5v)
{
    m_controlMain5v = _controlMain5v;
}

/*!
 * @brief This function returns the value of member controlMain5v
 * @return Value of member controlMain5v
 */
uint8_t TelemetryReply::controlMain5v() const
{
    return m_controlMain5v;
}

/*!
 * @brief This function returns a reference to member controlMain5v
 * @return Reference to member controlMain5v
 */
uint8_t& TelemetryReply::controlMain5v()
{
    return m_controlMain5v;
}


/*!
 * @brief This function sets a value in member controlBack5v
 * @param _controlBack5v New value for member controlBack5v
 */
void TelemetryReply::controlBack5v(
        uint8_t _controlBack5v)
{
    m_controlBack5v = _controlBack5v;
}

/*!
 * @brief This function returns the value of member controlBack5v
 * @return Value of member controlBack5v
 */
uint8_t TelemetryReply::controlBack5v() const
{
    return m_controlBack5v;
}

/*!
 * @brief This function returns a reference to member controlBack5v
 * @return Reference to member controlBack5v
 */
uint8_t& TelemetryReply::controlBack5v()
{
    return m_controlBack5v;
}


/*!
 * @brief This function sets a value in member realMod1
 * @param _realMod1 New value for member realMod1
 */
void TelemetryReply::realMod1(
        uint8_t _realMod1)
{
    m_realMod1 = _realMod1;
}

/*!
 * @brief This function returns the value of member realMod1
 * @return Value of member realMod1
 */
uint8_t TelemetryReply::realMod1() const
{
    return m_realMod1;
}

/*!
 * @brief This function returns a reference to member realMod1
 * @return Reference to member realMod1
 */
uint8_t& TelemetryReply::realMod1()
{
    return m_realMod1;
}


/*!
 * @brief This function sets a value in member realMod2
 * @param _realMod2 New value for member realMod2
 */
void TelemetryReply::realMod2(
        uint8_t _realMod2)
{
    m_realMod2 = _realMod2;
}

/*!
 * @brief This function returns the value of member realMod2
 * @return Value of member realMod2
 */
uint8_t TelemetryReply::realMod2() const
{
    return m_realMod2;
}

/*!
 * @brief This function returns a reference to member realMod2
 * @return Reference to member realMod2
 */
uint8_t& TelemetryReply::realMod2()
{
    return m_realMod2;
}


/*!
 * @brief This function sets a value in member realMod3
 * @param _realMod3 New value for member realMod3
 */
void TelemetryReply::realMod3(
        uint8_t _realMod3)
{
    m_realMod3 = _realMod3;
}

/*!
 * @brief This function returns the value of member realMod3
 * @return Value of member realMod3
 */
uint8_t TelemetryReply::realMod3() const
{
    return m_realMod3;
}

/*!
 * @brief This function returns a reference to member realMod3
 * @return Reference to member realMod3
 */
uint8_t& TelemetryReply::realMod3()
{
    return m_realMod3;
}


/*!
 * @brief This function sets a value in member realMod4
 * @param _realMod4 New value for member realMod4
 */
void TelemetryReply::realMod4(
        uint8_t _realMod4)
{
    m_realMod4 = _realMod4;
}

/*!
 * @brief This function returns the value of member realMod4
 * @return Value of member realMod4
 */
uint8_t TelemetryReply::realMod4() const
{
    return m_realMod4;
}

/*!
 * @brief This function returns a reference to member realMod4
 * @return Reference to member realMod4
 */
uint8_t& TelemetryReply::realMod4()
{
    return m_realMod4;
}


/*!
 * @brief This function sets a value in member argTelemetry2
 * @param _argTelemetry2 New value for member argTelemetry2
 */
void TelemetryReply::argTelemetry2(
        uint8_t _argTelemetry2)
{
    m_argTelemetry2 = _argTelemetry2;
}

/*!
 * @brief This function returns the value of member argTelemetry2
 * @return Value of member argTelemetry2
 */
uint8_t TelemetryReply::argTelemetry2() const
{
    return m_argTelemetry2;
}

/*!
 * @brief This function returns a reference to member argTelemetry2
 * @return Reference to member argTelemetry2
 */
uint8_t& TelemetryReply::argTelemetry2()
{
    return m_argTelemetry2;
}


/*!
 * @brief This function sets a value in member argTelemetry3
 * @param _argTelemetry3 New value for member argTelemetry3
 */
void TelemetryReply::argTelemetry3(
        uint8_t _argTelemetry3)
{
    m_argTelemetry3 = _argTelemetry3;
}

/*!
 * @brief This function returns the value of member argTelemetry3
 * @return Value of member argTelemetry3
 */
uint8_t TelemetryReply::argTelemetry3() const
{
    return m_argTelemetry3;
}

/*!
 * @brief This function returns a reference to member argTelemetry3
 * @return Reference to member argTelemetry3
 */
uint8_t& TelemetryReply::argTelemetry3()
{
    return m_argTelemetry3;
}


/*!
 * @brief This function sets a value in member argTelemetry4
 * @param _argTelemetry4 New value for member argTelemetry4
 */
void TelemetryReply::argTelemetry4(
        uint8_t _argTelemetry4)
{
    m_argTelemetry4 = _argTelemetry4;
}

/*!
 * @brief This function returns the value of member argTelemetry4
 * @return Value of member argTelemetry4
 */
uint8_t TelemetryReply::argTelemetry4() const
{
    return m_argTelemetry4;
}

/*!
 * @brief This function returns a reference to member argTelemetry4
 * @return Reference to member argTelemetry4
 */
uint8_t& TelemetryReply::argTelemetry4()
{
    return m_argTelemetry4;
}


/*!
 * @brief This function sets a value in member argTelemetry5
 * @param _argTelemetry5 New value for member argTelemetry5
 */
void TelemetryReply::argTelemetry5(
        uint8_t _argTelemetry5)
{
    m_argTelemetry5 = _argTelemetry5;
}

/*!
 * @brief This function returns the value of member argTelemetry5
 * @return Value of member argTelemetry5
 */
uint8_t TelemetryReply::argTelemetry5() const
{
    return m_argTelemetry5;
}

/*!
 * @brief This function returns a reference to member argTelemetry5
 * @return Reference to member argTelemetry5
 */
uint8_t& TelemetryReply::argTelemetry5()
{
    return m_argTelemetry5;
}


/*!
 * @brief This function sets a value in member argTelemetry6
 * @param _argTelemetry6 New value for member argTelemetry6
 */
void TelemetryReply::argTelemetry6(
        uint8_t _argTelemetry6)
{
    m_argTelemetry6 = _argTelemetry6;
}

/*!
 * @brief This function returns the value of member argTelemetry6
 * @return Value of member argTelemetry6
 */
uint8_t TelemetryReply::argTelemetry6() const
{
    return m_argTelemetry6;
}

/*!
 * @brief This function returns a reference to member argTelemetry6
 * @return Reference to member argTelemetry6
 */
uint8_t& TelemetryReply::argTelemetry6()
{
    return m_argTelemetry6;
}




ParamPackage::ParamPackage()
{
}

ParamPackage::~ParamPackage()
{
}

ParamPackage::ParamPackage(
        const ParamPackage& x)
{
    m_packSize = x.m_packSize;
    m_contentCtrl = x.m_contentCtrl;
    m_taskNumber = x.m_taskNumber;
    m_block1 = x.m_block1;
    m_block2 = x.m_block2;
    m_block3 = x.m_block3;
    m_block4 = x.m_block4;
    m_matrixSelect = x.m_matrixSelect;
    m_gap = x.m_gap;
}

ParamPackage::ParamPackage(
        ParamPackage&& x) noexcept
{
    m_packSize = x.m_packSize;
    m_contentCtrl = x.m_contentCtrl;
    m_taskNumber = x.m_taskNumber;
    m_block1 = std::move(x.m_block1);
    m_block2 = std::move(x.m_block2);
    m_block3 = std::move(x.m_block3);
    m_block4 = std::move(x.m_block4);
    m_matrixSelect = x.m_matrixSelect;
    m_gap = x.m_gap;
}

ParamPackage& ParamPackage::operator =(
        const ParamPackage& x)
{

    m_packSize = x.m_packSize;
    m_contentCtrl = x.m_contentCtrl;
    m_taskNumber = x.m_taskNumber;
    m_block1 = x.m_block1;
    m_block2 = x.m_block2;
    m_block3 = x.m_block3;
    m_block4 = x.m_block4;
    m_matrixSelect = x.m_matrixSelect;
    m_gap = x.m_gap;
    return *this;
}

ParamPackage& ParamPackage::operator =(
        ParamPackage&& x) noexcept
{

    m_packSize = x.m_packSize;
    m_contentCtrl = x.m_contentCtrl;
    m_taskNumber = x.m_taskNumber;
    m_block1 = std::move(x.m_block1);
    m_block2 = std::move(x.m_block2);
    m_block3 = std::move(x.m_block3);
    m_block4 = std::move(x.m_block4);
    m_matrixSelect = x.m_matrixSelect;
    m_gap = x.m_gap;
    return *this;
}

bool ParamPackage::operator ==(
        const ParamPackage& x) const
{
    return (m_packSize == x.m_packSize &&
           m_contentCtrl == x.m_contentCtrl &&
           m_taskNumber == x.m_taskNumber &&
           m_block1 == x.m_block1 &&
           m_block2 == x.m_block2 &&
           m_block3 == x.m_block3 &&
           m_block4 == x.m_block4 &&
           m_matrixSelect == x.m_matrixSelect &&
           m_gap == x.m_gap);
}

bool ParamPackage::operator !=(
        const ParamPackage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member packSize
 * @param _packSize New value for member packSize
 */
void ParamPackage::packSize(
        uint16_t _packSize)
{
    m_packSize = _packSize;
}

/*!
 * @brief This function returns the value of member packSize
 * @return Value of member packSize
 */
uint16_t ParamPackage::packSize() const
{
    return m_packSize;
}

/*!
 * @brief This function returns a reference to member packSize
 * @return Reference to member packSize
 */
uint16_t& ParamPackage::packSize()
{
    return m_packSize;
}


/*!
 * @brief This function sets a value in member contentCtrl
 * @param _contentCtrl New value for member contentCtrl
 */
void ParamPackage::contentCtrl(
        uint16_t _contentCtrl)
{
    m_contentCtrl = _contentCtrl;
}

/*!
 * @brief This function returns the value of member contentCtrl
 * @return Value of member contentCtrl
 */
uint16_t ParamPackage::contentCtrl() const
{
    return m_contentCtrl;
}

/*!
 * @brief This function returns a reference to member contentCtrl
 * @return Reference to member contentCtrl
 */
uint16_t& ParamPackage::contentCtrl()
{
    return m_contentCtrl;
}


/*!
 * @brief This function sets a value in member taskNumber
 * @param _taskNumber New value for member taskNumber
 */
void ParamPackage::taskNumber(
        uint16_t _taskNumber)
{
    m_taskNumber = _taskNumber;
}

/*!
 * @brief This function returns the value of member taskNumber
 * @return Value of member taskNumber
 */
uint16_t ParamPackage::taskNumber() const
{
    return m_taskNumber;
}

/*!
 * @brief This function returns a reference to member taskNumber
 * @return Reference to member taskNumber
 */
uint16_t& ParamPackage::taskNumber()
{
    return m_taskNumber;
}


/*!
 * @brief This function copies the value in member block1
 * @param _block1 New value to be copied in member block1
 */
void ParamPackage::block1(
        const std::array<uint8_t, 60>& _block1)
{
    m_block1 = _block1;
}

/*!
 * @brief This function moves the value in member block1
 * @param _block1 New value to be moved in member block1
 */
void ParamPackage::block1(
        std::array<uint8_t, 60>&& _block1)
{
    m_block1 = std::move(_block1);
}

/*!
 * @brief This function returns a constant reference to member block1
 * @return Constant reference to member block1
 */
const std::array<uint8_t, 60>& ParamPackage::block1() const
{
    return m_block1;
}

/*!
 * @brief This function returns a reference to member block1
 * @return Reference to member block1
 */
std::array<uint8_t, 60>& ParamPackage::block1()
{
    return m_block1;
}


/*!
 * @brief This function copies the value in member block2
 * @param _block2 New value to be copied in member block2
 */
void ParamPackage::block2(
        const std::array<uint8_t, 60>& _block2)
{
    m_block2 = _block2;
}

/*!
 * @brief This function moves the value in member block2
 * @param _block2 New value to be moved in member block2
 */
void ParamPackage::block2(
        std::array<uint8_t, 60>&& _block2)
{
    m_block2 = std::move(_block2);
}

/*!
 * @brief This function returns a constant reference to member block2
 * @return Constant reference to member block2
 */
const std::array<uint8_t, 60>& ParamPackage::block2() const
{
    return m_block2;
}

/*!
 * @brief This function returns a reference to member block2
 * @return Reference to member block2
 */
std::array<uint8_t, 60>& ParamPackage::block2()
{
    return m_block2;
}


/*!
 * @brief This function copies the value in member block3
 * @param _block3 New value to be copied in member block3
 */
void ParamPackage::block3(
        const std::array<uint8_t, 60>& _block3)
{
    m_block3 = _block3;
}

/*!
 * @brief This function moves the value in member block3
 * @param _block3 New value to be moved in member block3
 */
void ParamPackage::block3(
        std::array<uint8_t, 60>&& _block3)
{
    m_block3 = std::move(_block3);
}

/*!
 * @brief This function returns a constant reference to member block3
 * @return Constant reference to member block3
 */
const std::array<uint8_t, 60>& ParamPackage::block3() const
{
    return m_block3;
}

/*!
 * @brief This function returns a reference to member block3
 * @return Reference to member block3
 */
std::array<uint8_t, 60>& ParamPackage::block3()
{
    return m_block3;
}


/*!
 * @brief This function copies the value in member block4
 * @param _block4 New value to be copied in member block4
 */
void ParamPackage::block4(
        const std::array<uint8_t, 60>& _block4)
{
    m_block4 = _block4;
}

/*!
 * @brief This function moves the value in member block4
 * @param _block4 New value to be moved in member block4
 */
void ParamPackage::block4(
        std::array<uint8_t, 60>&& _block4)
{
    m_block4 = std::move(_block4);
}

/*!
 * @brief This function returns a constant reference to member block4
 * @return Constant reference to member block4
 */
const std::array<uint8_t, 60>& ParamPackage::block4() const
{
    return m_block4;
}

/*!
 * @brief This function returns a reference to member block4
 * @return Reference to member block4
 */
std::array<uint8_t, 60>& ParamPackage::block4()
{
    return m_block4;
}


/*!
 * @brief This function sets a value in member matrixSelect
 * @param _matrixSelect New value for member matrixSelect
 */
void ParamPackage::matrixSelect(
        uint8_t _matrixSelect)
{
    m_matrixSelect = _matrixSelect;
}

/*!
 * @brief This function returns the value of member matrixSelect
 * @return Value of member matrixSelect
 */
uint8_t ParamPackage::matrixSelect() const
{
    return m_matrixSelect;
}

/*!
 * @brief This function returns a reference to member matrixSelect
 * @return Reference to member matrixSelect
 */
uint8_t& ParamPackage::matrixSelect()
{
    return m_matrixSelect;
}


/*!
 * @brief This function sets a value in member gap
 * @param _gap New value for member gap
 */
void ParamPackage::gap(
        uint8_t _gap)
{
    m_gap = _gap;
}

/*!
 * @brief This function returns the value of member gap
 * @return Value of member gap
 */
uint8_t ParamPackage::gap() const
{
    return m_gap;
}

/*!
 * @brief This function returns a reference to member gap
 * @return Reference to member gap
 */
uint8_t& ParamPackage::gap()
{
    return m_gap;
}


// Include auxiliary functions like for serializing/deserializing.
#include "DataDefineCdrAux.ipp"

