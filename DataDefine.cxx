// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataDefine.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataDefine.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




Target::Target()
{
}

Target::~Target()
{
}

Target::Target(
        const Target& x)
{
    m_targetNumber = x.m_targetNumber;
    m_time = x.m_time;
    m_longitude = x.m_longitude;
    m_latitude = x.m_latitude;
    m_elevation = x.m_elevation;
    m_Priority = x.m_Priority;
    m_confidenceDegree = x.m_confidenceDegree;
    m_informationType = x.m_informationType;
    m_positionAccuracy = x.m_positionAccuracy;
    m_imagingMode = x.m_imagingMode;
    m_desiredTrack = x.m_desiredTrack;
    m_shipSpeed = x.m_shipSpeed;
    m_back = x.m_back;
}

Target::Target(
        Target&& x) noexcept
{
    m_targetNumber = x.m_targetNumber;
    m_time = std::move(x.m_time);
    m_longitude = x.m_longitude;
    m_latitude = x.m_latitude;
    m_elevation = x.m_elevation;
    m_Priority = x.m_Priority;
    m_confidenceDegree = x.m_confidenceDegree;
    m_informationType = x.m_informationType;
    m_positionAccuracy = x.m_positionAccuracy;
    m_imagingMode = x.m_imagingMode;
    m_desiredTrack = x.m_desiredTrack;
    m_shipSpeed = x.m_shipSpeed;
    m_back = std::move(x.m_back);
}

Target& Target::operator =(
        const Target& x)
{

    m_targetNumber = x.m_targetNumber;
    m_time = x.m_time;
    m_longitude = x.m_longitude;
    m_latitude = x.m_latitude;
    m_elevation = x.m_elevation;
    m_Priority = x.m_Priority;
    m_confidenceDegree = x.m_confidenceDegree;
    m_informationType = x.m_informationType;
    m_positionAccuracy = x.m_positionAccuracy;
    m_imagingMode = x.m_imagingMode;
    m_desiredTrack = x.m_desiredTrack;
    m_shipSpeed = x.m_shipSpeed;
    m_back = x.m_back;
    return *this;
}

Target& Target::operator =(
        Target&& x) noexcept
{

    m_targetNumber = x.m_targetNumber;
    m_time = std::move(x.m_time);
    m_longitude = x.m_longitude;
    m_latitude = x.m_latitude;
    m_elevation = x.m_elevation;
    m_Priority = x.m_Priority;
    m_confidenceDegree = x.m_confidenceDegree;
    m_informationType = x.m_informationType;
    m_positionAccuracy = x.m_positionAccuracy;
    m_imagingMode = x.m_imagingMode;
    m_desiredTrack = x.m_desiredTrack;
    m_shipSpeed = x.m_shipSpeed;
    m_back = std::move(x.m_back);
    return *this;
}

bool Target::operator ==(
        const Target& x) const
{
    return (m_targetNumber == x.m_targetNumber &&
           m_time == x.m_time &&
           m_longitude == x.m_longitude &&
           m_latitude == x.m_latitude &&
           m_elevation == x.m_elevation &&
           m_Priority == x.m_Priority &&
           m_confidenceDegree == x.m_confidenceDegree &&
           m_informationType == x.m_informationType &&
           m_positionAccuracy == x.m_positionAccuracy &&
           m_imagingMode == x.m_imagingMode &&
           m_desiredTrack == x.m_desiredTrack &&
           m_shipSpeed == x.m_shipSpeed &&
           m_back == x.m_back);
}

bool Target::operator !=(
        const Target& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member targetNumber
 * @param _targetNumber New value for member targetNumber
 */
void Target::targetNumber(
        uint16_t _targetNumber)
{
    m_targetNumber = _targetNumber;
}

/*!
 * @brief This function returns the value of member targetNumber
 * @return Value of member targetNumber
 */
uint16_t Target::targetNumber() const
{
    return m_targetNumber;
}

/*!
 * @brief This function returns a reference to member targetNumber
 * @return Reference to member targetNumber
 */
uint16_t& Target::targetNumber()
{
    return m_targetNumber;
}


/*!
 * @brief This function copies the value in member time
 * @param _time New value to be copied in member time
 */
void Target::time(
        const std::array<uint8_t, 6>& _time)
{
    m_time = _time;
}

/*!
 * @brief This function moves the value in member time
 * @param _time New value to be moved in member time
 */
void Target::time(
        std::array<uint8_t, 6>&& _time)
{
    m_time = std::move(_time);
}

/*!
 * @brief This function returns a constant reference to member time
 * @return Constant reference to member time
 */
const std::array<uint8_t, 6>& Target::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
std::array<uint8_t, 6>& Target::time()
{
    return m_time;
}


/*!
 * @brief This function sets a value in member longitude
 * @param _longitude New value for member longitude
 */
void Target::longitude(
        int32_t _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function returns the value of member longitude
 * @return Value of member longitude
 */
int32_t Target::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude
 * @return Reference to member longitude
 */
int32_t& Target::longitude()
{
    return m_longitude;
}


/*!
 * @brief This function sets a value in member latitude
 * @param _latitude New value for member latitude
 */
void Target::latitude(
        int32_t _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function returns the value of member latitude
 * @return Value of member latitude
 */
int32_t Target::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude
 * @return Reference to member latitude
 */
int32_t& Target::latitude()
{
    return m_latitude;
}


/*!
 * @brief This function sets a value in member elevation
 * @param _elevation New value for member elevation
 */
void Target::elevation(
        uint16_t _elevation)
{
    m_elevation = _elevation;
}

/*!
 * @brief This function returns the value of member elevation
 * @return Value of member elevation
 */
uint16_t Target::elevation() const
{
    return m_elevation;
}

/*!
 * @brief This function returns a reference to member elevation
 * @return Reference to member elevation
 */
uint16_t& Target::elevation()
{
    return m_elevation;
}


/*!
 * @brief This function sets a value in member Priority
 * @param _Priority New value for member Priority
 */
void Target::Priority(
        uint8_t _Priority)
{
    m_Priority = _Priority;
}

/*!
 * @brief This function returns the value of member Priority
 * @return Value of member Priority
 */
uint8_t Target::Priority() const
{
    return m_Priority;
}

/*!
 * @brief This function returns a reference to member Priority
 * @return Reference to member Priority
 */
uint8_t& Target::Priority()
{
    return m_Priority;
}


/*!
 * @brief This function sets a value in member confidenceDegree
 * @param _confidenceDegree New value for member confidenceDegree
 */
void Target::confidenceDegree(
        uint8_t _confidenceDegree)
{
    m_confidenceDegree = _confidenceDegree;
}

/*!
 * @brief This function returns the value of member confidenceDegree
 * @return Value of member confidenceDegree
 */
uint8_t Target::confidenceDegree() const
{
    return m_confidenceDegree;
}

/*!
 * @brief This function returns a reference to member confidenceDegree
 * @return Reference to member confidenceDegree
 */
uint8_t& Target::confidenceDegree()
{
    return m_confidenceDegree;
}


/*!
 * @brief This function sets a value in member informationType
 * @param _informationType New value for member informationType
 */
void Target::informationType(
        uint8_t _informationType)
{
    m_informationType = _informationType;
}

/*!
 * @brief This function returns the value of member informationType
 * @return Value of member informationType
 */
uint8_t Target::informationType() const
{
    return m_informationType;
}

/*!
 * @brief This function returns a reference to member informationType
 * @return Reference to member informationType
 */
uint8_t& Target::informationType()
{
    return m_informationType;
}


/*!
 * @brief This function sets a value in member positionAccuracy
 * @param _positionAccuracy New value for member positionAccuracy
 */
void Target::positionAccuracy(
        uint8_t _positionAccuracy)
{
    m_positionAccuracy = _positionAccuracy;
}

/*!
 * @brief This function returns the value of member positionAccuracy
 * @return Value of member positionAccuracy
 */
uint8_t Target::positionAccuracy() const
{
    return m_positionAccuracy;
}

/*!
 * @brief This function returns a reference to member positionAccuracy
 * @return Reference to member positionAccuracy
 */
uint8_t& Target::positionAccuracy()
{
    return m_positionAccuracy;
}


/*!
 * @brief This function sets a value in member imagingMode
 * @param _imagingMode New value for member imagingMode
 */
void Target::imagingMode(
        uint8_t _imagingMode)
{
    m_imagingMode = _imagingMode;
}

/*!
 * @brief This function returns the value of member imagingMode
 * @return Value of member imagingMode
 */
uint8_t Target::imagingMode() const
{
    return m_imagingMode;
}

/*!
 * @brief This function returns a reference to member imagingMode
 * @return Reference to member imagingMode
 */
uint8_t& Target::imagingMode()
{
    return m_imagingMode;
}


/*!
 * @brief This function sets a value in member desiredTrack
 * @param _desiredTrack New value for member desiredTrack
 */
void Target::desiredTrack(
        uint16_t _desiredTrack)
{
    m_desiredTrack = _desiredTrack;
}

/*!
 * @brief This function returns the value of member desiredTrack
 * @return Value of member desiredTrack
 */
uint16_t Target::desiredTrack() const
{
    return m_desiredTrack;
}

/*!
 * @brief This function returns a reference to member desiredTrack
 * @return Reference to member desiredTrack
 */
uint16_t& Target::desiredTrack()
{
    return m_desiredTrack;
}


/*!
 * @brief This function sets a value in member shipSpeed
 * @param _shipSpeed New value for member shipSpeed
 */
void Target::shipSpeed(
        uint16_t _shipSpeed)
{
    m_shipSpeed = _shipSpeed;
}

/*!
 * @brief This function returns the value of member shipSpeed
 * @return Value of member shipSpeed
 */
uint16_t Target::shipSpeed() const
{
    return m_shipSpeed;
}

/*!
 * @brief This function returns a reference to member shipSpeed
 * @return Reference to member shipSpeed
 */
uint16_t& Target::shipSpeed()
{
    return m_shipSpeed;
}


/*!
 * @brief This function copies the value in member back
 * @param _back New value to be copied in member back
 */
void Target::back(
        const std::array<uint8_t, 5>& _back)
{
    m_back = _back;
}

/*!
 * @brief This function moves the value in member back
 * @param _back New value to be moved in member back
 */
void Target::back(
        std::array<uint8_t, 5>&& _back)
{
    m_back = std::move(_back);
}

/*!
 * @brief This function returns a constant reference to member back
 * @return Constant reference to member back
 */
const std::array<uint8_t, 5>& Target::back() const
{
    return m_back;
}

/*!
 * @brief This function returns a reference to member back
 * @return Reference to member back
 */
std::array<uint8_t, 5>& Target::back()
{
    return m_back;
}




GuidanceInfo::GuidanceInfo()
{
}

GuidanceInfo::~GuidanceInfo()
{
}

GuidanceInfo::GuidanceInfo(
        const GuidanceInfo& x)
{
    m_beatCount = x.m_beatCount;
    m_targetCount = x.m_targetCount;
    m_targetNode = x.m_targetNode;
    m_startNode = x.m_startNode;
    m_targetType = x.m_targetType;
    m_First = x.m_First;
    m_Second = x.m_Second;
    m_Third = x.m_Third;
    m_Fourth = x.m_Fourth;
    m_Fifth = x.m_Fifth;
}

GuidanceInfo::GuidanceInfo(
        GuidanceInfo&& x) noexcept
{
    m_beatCount = x.m_beatCount;
    m_targetCount = x.m_targetCount;
    m_targetNode = x.m_targetNode;
    m_startNode = x.m_startNode;
    m_targetType = x.m_targetType;
    m_First = std::move(x.m_First);
    m_Second = std::move(x.m_Second);
    m_Third = std::move(x.m_Third);
    m_Fourth = std::move(x.m_Fourth);
    m_Fifth = std::move(x.m_Fifth);
}

GuidanceInfo& GuidanceInfo::operator =(
        const GuidanceInfo& x)
{

    m_beatCount = x.m_beatCount;
    m_targetCount = x.m_targetCount;
    m_targetNode = x.m_targetNode;
    m_startNode = x.m_startNode;
    m_targetType = x.m_targetType;
    m_First = x.m_First;
    m_Second = x.m_Second;
    m_Third = x.m_Third;
    m_Fourth = x.m_Fourth;
    m_Fifth = x.m_Fifth;
    return *this;
}

GuidanceInfo& GuidanceInfo::operator =(
        GuidanceInfo&& x) noexcept
{

    m_beatCount = x.m_beatCount;
    m_targetCount = x.m_targetCount;
    m_targetNode = x.m_targetNode;
    m_startNode = x.m_startNode;
    m_targetType = x.m_targetType;
    m_First = std::move(x.m_First);
    m_Second = std::move(x.m_Second);
    m_Third = std::move(x.m_Third);
    m_Fourth = std::move(x.m_Fourth);
    m_Fifth = std::move(x.m_Fifth);
    return *this;
}

bool GuidanceInfo::operator ==(
        const GuidanceInfo& x) const
{
    return (m_beatCount == x.m_beatCount &&
           m_targetCount == x.m_targetCount &&
           m_targetNode == x.m_targetNode &&
           m_startNode == x.m_startNode &&
           m_targetType == x.m_targetType &&
           m_First == x.m_First &&
           m_Second == x.m_Second &&
           m_Third == x.m_Third &&
           m_Fourth == x.m_Fourth &&
           m_Fifth == x.m_Fifth);
}

bool GuidanceInfo::operator !=(
        const GuidanceInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member beatCount
 * @param _beatCount New value for member beatCount
 */
void GuidanceInfo::beatCount(
        uint16_t _beatCount)
{
    m_beatCount = _beatCount;
}

/*!
 * @brief This function returns the value of member beatCount
 * @return Value of member beatCount
 */
uint16_t GuidanceInfo::beatCount() const
{
    return m_beatCount;
}

/*!
 * @brief This function returns a reference to member beatCount
 * @return Reference to member beatCount
 */
uint16_t& GuidanceInfo::beatCount()
{
    return m_beatCount;
}


/*!
 * @brief This function sets a value in member targetCount
 * @param _targetCount New value for member targetCount
 */
void GuidanceInfo::targetCount(
        uint8_t _targetCount)
{
    m_targetCount = _targetCount;
}

/*!
 * @brief This function returns the value of member targetCount
 * @return Value of member targetCount
 */
uint8_t GuidanceInfo::targetCount() const
{
    return m_targetCount;
}

/*!
 * @brief This function returns a reference to member targetCount
 * @return Reference to member targetCount
 */
uint8_t& GuidanceInfo::targetCount()
{
    return m_targetCount;
}


/*!
 * @brief This function sets a value in member targetNode
 * @param _targetNode New value for member targetNode
 */
void GuidanceInfo::targetNode(
        uint8_t _targetNode)
{
    m_targetNode = _targetNode;
}

/*!
 * @brief This function returns the value of member targetNode
 * @return Value of member targetNode
 */
uint8_t GuidanceInfo::targetNode() const
{
    return m_targetNode;
}

/*!
 * @brief This function returns a reference to member targetNode
 * @return Reference to member targetNode
 */
uint8_t& GuidanceInfo::targetNode()
{
    return m_targetNode;
}


/*!
 * @brief This function sets a value in member startNode
 * @param _startNode New value for member startNode
 */
void GuidanceInfo::startNode(
        uint8_t _startNode)
{
    m_startNode = _startNode;
}

/*!
 * @brief This function returns the value of member startNode
 * @return Value of member startNode
 */
uint8_t GuidanceInfo::startNode() const
{
    return m_startNode;
}

/*!
 * @brief This function returns a reference to member startNode
 * @return Reference to member startNode
 */
uint8_t& GuidanceInfo::startNode()
{
    return m_startNode;
}


/*!
 * @brief This function sets a value in member targetType
 * @param _targetType New value for member targetType
 */
void GuidanceInfo::targetType(
        uint8_t _targetType)
{
    m_targetType = _targetType;
}

/*!
 * @brief This function returns the value of member targetType
 * @return Value of member targetType
 */
uint8_t GuidanceInfo::targetType() const
{
    return m_targetType;
}

/*!
 * @brief This function returns a reference to member targetType
 * @return Reference to member targetType
 */
uint8_t& GuidanceInfo::targetType()
{
    return m_targetType;
}


/*!
 * @brief This function copies the value in member First
 * @param _First New value to be copied in member First
 */
void GuidanceInfo::First(
        const Target& _First)
{
    m_First = _First;
}

/*!
 * @brief This function moves the value in member First
 * @param _First New value to be moved in member First
 */
void GuidanceInfo::First(
        Target&& _First)
{
    m_First = std::move(_First);
}

/*!
 * @brief This function returns a constant reference to member First
 * @return Constant reference to member First
 */
const Target& GuidanceInfo::First() const
{
    return m_First;
}

/*!
 * @brief This function returns a reference to member First
 * @return Reference to member First
 */
Target& GuidanceInfo::First()
{
    return m_First;
}


/*!
 * @brief This function copies the value in member Second
 * @param _Second New value to be copied in member Second
 */
void GuidanceInfo::Second(
        const Target& _Second)
{
    m_Second = _Second;
}

/*!
 * @brief This function moves the value in member Second
 * @param _Second New value to be moved in member Second
 */
void GuidanceInfo::Second(
        Target&& _Second)
{
    m_Second = std::move(_Second);
}

/*!
 * @brief This function returns a constant reference to member Second
 * @return Constant reference to member Second
 */
const Target& GuidanceInfo::Second() const
{
    return m_Second;
}

/*!
 * @brief This function returns a reference to member Second
 * @return Reference to member Second
 */
Target& GuidanceInfo::Second()
{
    return m_Second;
}


/*!
 * @brief This function copies the value in member Third
 * @param _Third New value to be copied in member Third
 */
void GuidanceInfo::Third(
        const Target& _Third)
{
    m_Third = _Third;
}

/*!
 * @brief This function moves the value in member Third
 * @param _Third New value to be moved in member Third
 */
void GuidanceInfo::Third(
        Target&& _Third)
{
    m_Third = std::move(_Third);
}

/*!
 * @brief This function returns a constant reference to member Third
 * @return Constant reference to member Third
 */
const Target& GuidanceInfo::Third() const
{
    return m_Third;
}

/*!
 * @brief This function returns a reference to member Third
 * @return Reference to member Third
 */
Target& GuidanceInfo::Third()
{
    return m_Third;
}


/*!
 * @brief This function copies the value in member Fourth
 * @param _Fourth New value to be copied in member Fourth
 */
void GuidanceInfo::Fourth(
        const Target& _Fourth)
{
    m_Fourth = _Fourth;
}

/*!
 * @brief This function moves the value in member Fourth
 * @param _Fourth New value to be moved in member Fourth
 */
void GuidanceInfo::Fourth(
        Target&& _Fourth)
{
    m_Fourth = std::move(_Fourth);
}

/*!
 * @brief This function returns a constant reference to member Fourth
 * @return Constant reference to member Fourth
 */
const Target& GuidanceInfo::Fourth() const
{
    return m_Fourth;
}

/*!
 * @brief This function returns a reference to member Fourth
 * @return Reference to member Fourth
 */
Target& GuidanceInfo::Fourth()
{
    return m_Fourth;
}


/*!
 * @brief This function copies the value in member Fifth
 * @param _Fifth New value to be copied in member Fifth
 */
void GuidanceInfo::Fifth(
        const Target& _Fifth)
{
    m_Fifth = _Fifth;
}

/*!
 * @brief This function moves the value in member Fifth
 * @param _Fifth New value to be moved in member Fifth
 */
void GuidanceInfo::Fifth(
        Target&& _Fifth)
{
    m_Fifth = std::move(_Fifth);
}

/*!
 * @brief This function returns a constant reference to member Fifth
 * @return Constant reference to member Fifth
 */
const Target& GuidanceInfo::Fifth() const
{
    return m_Fifth;
}

/*!
 * @brief This function returns a reference to member Fifth
 * @return Reference to member Fifth
 */
Target& GuidanceInfo::Fifth()
{
    return m_Fifth;
}




ReplyInfo::ReplyInfo()
{
}

ReplyInfo::~ReplyInfo()
{
}

ReplyInfo::ReplyInfo(
        const ReplyInfo& x)
{
    m_targetNumber = x.m_targetNumber;
    m_handleNumber = x.m_handleNumber;
    m_sucessNumber = x.m_sucessNumber;
    m_executionNumber = x.m_executionNumber;
    m_ownTargetNumber = x.m_ownTargetNumber;
    m_startNode = x.m_startNode;
    m_targetNode = x.m_targetNode;
    m_number1 = x.m_number1;
    m_resultNumer1 = x.m_resultNumer1;
    m_number2 = x.m_number2;
    m_resultNumer2 = x.m_resultNumer2;
    m_number3 = x.m_number3;
    m_resultNumer3 = x.m_resultNumer3;
    m_number4 = x.m_number4;
    m_resultNumer4 = x.m_resultNumer4;
    m_number5 = x.m_number5;
    m_resultNumer5 = x.m_resultNumer5;
    m_number6 = x.m_number6;
    m_resultNumer6 = x.m_resultNumer6;
    m_number7 = x.m_number7;
    m_resultNumer7 = x.m_resultNumer7;
    m_number8 = x.m_number8;
    m_resultNumer8 = x.m_resultNumer8;
    m_number9 = x.m_number9;
    m_resultNumer9 = x.m_resultNumer9;
    m_number10 = x.m_number10;
    m_resultNumer10 = x.m_resultNumer10;
}

ReplyInfo::ReplyInfo(
        ReplyInfo&& x) noexcept
{
    m_targetNumber = x.m_targetNumber;
    m_handleNumber = x.m_handleNumber;
    m_sucessNumber = x.m_sucessNumber;
    m_executionNumber = x.m_executionNumber;
    m_ownTargetNumber = x.m_ownTargetNumber;
    m_startNode = x.m_startNode;
    m_targetNode = x.m_targetNode;
    m_number1 = x.m_number1;
    m_resultNumer1 = std::move(x.m_resultNumer1);
    m_number2 = x.m_number2;
    m_resultNumer2 = std::move(x.m_resultNumer2);
    m_number3 = x.m_number3;
    m_resultNumer3 = std::move(x.m_resultNumer3);
    m_number4 = x.m_number4;
    m_resultNumer4 = std::move(x.m_resultNumer4);
    m_number5 = x.m_number5;
    m_resultNumer5 = std::move(x.m_resultNumer5);
    m_number6 = x.m_number6;
    m_resultNumer6 = std::move(x.m_resultNumer6);
    m_number7 = x.m_number7;
    m_resultNumer7 = std::move(x.m_resultNumer7);
    m_number8 = x.m_number8;
    m_resultNumer8 = std::move(x.m_resultNumer8);
    m_number9 = x.m_number9;
    m_resultNumer9 = std::move(x.m_resultNumer9);
    m_number10 = x.m_number10;
    m_resultNumer10 = std::move(x.m_resultNumer10);
}

ReplyInfo& ReplyInfo::operator =(
        const ReplyInfo& x)
{

    m_targetNumber = x.m_targetNumber;
    m_handleNumber = x.m_handleNumber;
    m_sucessNumber = x.m_sucessNumber;
    m_executionNumber = x.m_executionNumber;
    m_ownTargetNumber = x.m_ownTargetNumber;
    m_startNode = x.m_startNode;
    m_targetNode = x.m_targetNode;
    m_number1 = x.m_number1;
    m_resultNumer1 = x.m_resultNumer1;
    m_number2 = x.m_number2;
    m_resultNumer2 = x.m_resultNumer2;
    m_number3 = x.m_number3;
    m_resultNumer3 = x.m_resultNumer3;
    m_number4 = x.m_number4;
    m_resultNumer4 = x.m_resultNumer4;
    m_number5 = x.m_number5;
    m_resultNumer5 = x.m_resultNumer5;
    m_number6 = x.m_number6;
    m_resultNumer6 = x.m_resultNumer6;
    m_number7 = x.m_number7;
    m_resultNumer7 = x.m_resultNumer7;
    m_number8 = x.m_number8;
    m_resultNumer8 = x.m_resultNumer8;
    m_number9 = x.m_number9;
    m_resultNumer9 = x.m_resultNumer9;
    m_number10 = x.m_number10;
    m_resultNumer10 = x.m_resultNumer10;
    return *this;
}

ReplyInfo& ReplyInfo::operator =(
        ReplyInfo&& x) noexcept
{

    m_targetNumber = x.m_targetNumber;
    m_handleNumber = x.m_handleNumber;
    m_sucessNumber = x.m_sucessNumber;
    m_executionNumber = x.m_executionNumber;
    m_ownTargetNumber = x.m_ownTargetNumber;
    m_startNode = x.m_startNode;
    m_targetNode = x.m_targetNode;
    m_number1 = x.m_number1;
    m_resultNumer1 = std::move(x.m_resultNumer1);
    m_number2 = x.m_number2;
    m_resultNumer2 = std::move(x.m_resultNumer2);
    m_number3 = x.m_number3;
    m_resultNumer3 = std::move(x.m_resultNumer3);
    m_number4 = x.m_number4;
    m_resultNumer4 = std::move(x.m_resultNumer4);
    m_number5 = x.m_number5;
    m_resultNumer5 = std::move(x.m_resultNumer5);
    m_number6 = x.m_number6;
    m_resultNumer6 = std::move(x.m_resultNumer6);
    m_number7 = x.m_number7;
    m_resultNumer7 = std::move(x.m_resultNumer7);
    m_number8 = x.m_number8;
    m_resultNumer8 = std::move(x.m_resultNumer8);
    m_number9 = x.m_number9;
    m_resultNumer9 = std::move(x.m_resultNumer9);
    m_number10 = x.m_number10;
    m_resultNumer10 = std::move(x.m_resultNumer10);
    return *this;
}

bool ReplyInfo::operator ==(
        const ReplyInfo& x) const
{
    return (m_targetNumber == x.m_targetNumber &&
           m_handleNumber == x.m_handleNumber &&
           m_sucessNumber == x.m_sucessNumber &&
           m_executionNumber == x.m_executionNumber &&
           m_ownTargetNumber == x.m_ownTargetNumber &&
           m_startNode == x.m_startNode &&
           m_targetNode == x.m_targetNode &&
           m_number1 == x.m_number1 &&
           m_resultNumer1 == x.m_resultNumer1 &&
           m_number2 == x.m_number2 &&
           m_resultNumer2 == x.m_resultNumer2 &&
           m_number3 == x.m_number3 &&
           m_resultNumer3 == x.m_resultNumer3 &&
           m_number4 == x.m_number4 &&
           m_resultNumer4 == x.m_resultNumer4 &&
           m_number5 == x.m_number5 &&
           m_resultNumer5 == x.m_resultNumer5 &&
           m_number6 == x.m_number6 &&
           m_resultNumer6 == x.m_resultNumer6 &&
           m_number7 == x.m_number7 &&
           m_resultNumer7 == x.m_resultNumer7 &&
           m_number8 == x.m_number8 &&
           m_resultNumer8 == x.m_resultNumer8 &&
           m_number9 == x.m_number9 &&
           m_resultNumer9 == x.m_resultNumer9 &&
           m_number10 == x.m_number10 &&
           m_resultNumer10 == x.m_resultNumer10);
}

bool ReplyInfo::operator !=(
        const ReplyInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member targetNumber
 * @param _targetNumber New value for member targetNumber
 */
void ReplyInfo::targetNumber(
        uint16_t _targetNumber)
{
    m_targetNumber = _targetNumber;
}

/*!
 * @brief This function returns the value of member targetNumber
 * @return Value of member targetNumber
 */
uint16_t ReplyInfo::targetNumber() const
{
    return m_targetNumber;
}

/*!
 * @brief This function returns a reference to member targetNumber
 * @return Reference to member targetNumber
 */
uint16_t& ReplyInfo::targetNumber()
{
    return m_targetNumber;
}


/*!
 * @brief This function sets a value in member handleNumber
 * @param _handleNumber New value for member handleNumber
 */
void ReplyInfo::handleNumber(
        uint16_t _handleNumber)
{
    m_handleNumber = _handleNumber;
}

/*!
 * @brief This function returns the value of member handleNumber
 * @return Value of member handleNumber
 */
uint16_t ReplyInfo::handleNumber() const
{
    return m_handleNumber;
}

/*!
 * @brief This function returns a reference to member handleNumber
 * @return Reference to member handleNumber
 */
uint16_t& ReplyInfo::handleNumber()
{
    return m_handleNumber;
}


/*!
 * @brief This function sets a value in member sucessNumber
 * @param _sucessNumber New value for member sucessNumber
 */
void ReplyInfo::sucessNumber(
        uint16_t _sucessNumber)
{
    m_sucessNumber = _sucessNumber;
}

/*!
 * @brief This function returns the value of member sucessNumber
 * @return Value of member sucessNumber
 */
uint16_t ReplyInfo::sucessNumber() const
{
    return m_sucessNumber;
}

/*!
 * @brief This function returns a reference to member sucessNumber
 * @return Reference to member sucessNumber
 */
uint16_t& ReplyInfo::sucessNumber()
{
    return m_sucessNumber;
}


/*!
 * @brief This function sets a value in member executionNumber
 * @param _executionNumber New value for member executionNumber
 */
void ReplyInfo::executionNumber(
        uint16_t _executionNumber)
{
    m_executionNumber = _executionNumber;
}

/*!
 * @brief This function returns the value of member executionNumber
 * @return Value of member executionNumber
 */
uint16_t ReplyInfo::executionNumber() const
{
    return m_executionNumber;
}

/*!
 * @brief This function returns a reference to member executionNumber
 * @return Reference to member executionNumber
 */
uint16_t& ReplyInfo::executionNumber()
{
    return m_executionNumber;
}


/*!
 * @brief This function sets a value in member ownTargetNumber
 * @param _ownTargetNumber New value for member ownTargetNumber
 */
void ReplyInfo::ownTargetNumber(
        uint16_t _ownTargetNumber)
{
    m_ownTargetNumber = _ownTargetNumber;
}

/*!
 * @brief This function returns the value of member ownTargetNumber
 * @return Value of member ownTargetNumber
 */
uint16_t ReplyInfo::ownTargetNumber() const
{
    return m_ownTargetNumber;
}

/*!
 * @brief This function returns a reference to member ownTargetNumber
 * @return Reference to member ownTargetNumber
 */
uint16_t& ReplyInfo::ownTargetNumber()
{
    return m_ownTargetNumber;
}


/*!
 * @brief This function sets a value in member startNode
 * @param _startNode New value for member startNode
 */
void ReplyInfo::startNode(
        uint8_t _startNode)
{
    m_startNode = _startNode;
}

/*!
 * @brief This function returns the value of member startNode
 * @return Value of member startNode
 */
uint8_t ReplyInfo::startNode() const
{
    return m_startNode;
}

/*!
 * @brief This function returns a reference to member startNode
 * @return Reference to member startNode
 */
uint8_t& ReplyInfo::startNode()
{
    return m_startNode;
}


/*!
 * @brief This function sets a value in member targetNode
 * @param _targetNode New value for member targetNode
 */
void ReplyInfo::targetNode(
        uint8_t _targetNode)
{
    m_targetNode = _targetNode;
}

/*!
 * @brief This function returns the value of member targetNode
 * @return Value of member targetNode
 */
uint8_t ReplyInfo::targetNode() const
{
    return m_targetNode;
}

/*!
 * @brief This function returns a reference to member targetNode
 * @return Reference to member targetNode
 */
uint8_t& ReplyInfo::targetNode()
{
    return m_targetNode;
}


/*!
 * @brief This function sets a value in member number1
 * @param _number1 New value for member number1
 */
void ReplyInfo::number1(
        uint16_t _number1)
{
    m_number1 = _number1;
}

/*!
 * @brief This function returns the value of member number1
 * @return Value of member number1
 */
uint16_t ReplyInfo::number1() const
{
    return m_number1;
}

/*!
 * @brief This function returns a reference to member number1
 * @return Reference to member number1
 */
uint16_t& ReplyInfo::number1()
{
    return m_number1;
}


/*!
 * @brief This function copies the value in member resultNumer1
 * @param _resultNumer1 New value to be copied in member resultNumer1
 */
void ReplyInfo::resultNumer1(
        const std::array<uint8_t, 2>& _resultNumer1)
{
    m_resultNumer1 = _resultNumer1;
}

/*!
 * @brief This function moves the value in member resultNumer1
 * @param _resultNumer1 New value to be moved in member resultNumer1
 */
void ReplyInfo::resultNumer1(
        std::array<uint8_t, 2>&& _resultNumer1)
{
    m_resultNumer1 = std::move(_resultNumer1);
}

/*!
 * @brief This function returns a constant reference to member resultNumer1
 * @return Constant reference to member resultNumer1
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer1() const
{
    return m_resultNumer1;
}

/*!
 * @brief This function returns a reference to member resultNumer1
 * @return Reference to member resultNumer1
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer1()
{
    return m_resultNumer1;
}


/*!
 * @brief This function sets a value in member number2
 * @param _number2 New value for member number2
 */
void ReplyInfo::number2(
        uint16_t _number2)
{
    m_number2 = _number2;
}

/*!
 * @brief This function returns the value of member number2
 * @return Value of member number2
 */
uint16_t ReplyInfo::number2() const
{
    return m_number2;
}

/*!
 * @brief This function returns a reference to member number2
 * @return Reference to member number2
 */
uint16_t& ReplyInfo::number2()
{
    return m_number2;
}


/*!
 * @brief This function copies the value in member resultNumer2
 * @param _resultNumer2 New value to be copied in member resultNumer2
 */
void ReplyInfo::resultNumer2(
        const std::array<uint8_t, 2>& _resultNumer2)
{
    m_resultNumer2 = _resultNumer2;
}

/*!
 * @brief This function moves the value in member resultNumer2
 * @param _resultNumer2 New value to be moved in member resultNumer2
 */
void ReplyInfo::resultNumer2(
        std::array<uint8_t, 2>&& _resultNumer2)
{
    m_resultNumer2 = std::move(_resultNumer2);
}

/*!
 * @brief This function returns a constant reference to member resultNumer2
 * @return Constant reference to member resultNumer2
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer2() const
{
    return m_resultNumer2;
}

/*!
 * @brief This function returns a reference to member resultNumer2
 * @return Reference to member resultNumer2
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer2()
{
    return m_resultNumer2;
}


/*!
 * @brief This function sets a value in member number3
 * @param _number3 New value for member number3
 */
void ReplyInfo::number3(
        uint16_t _number3)
{
    m_number3 = _number3;
}

/*!
 * @brief This function returns the value of member number3
 * @return Value of member number3
 */
uint16_t ReplyInfo::number3() const
{
    return m_number3;
}

/*!
 * @brief This function returns a reference to member number3
 * @return Reference to member number3
 */
uint16_t& ReplyInfo::number3()
{
    return m_number3;
}


/*!
 * @brief This function copies the value in member resultNumer3
 * @param _resultNumer3 New value to be copied in member resultNumer3
 */
void ReplyInfo::resultNumer3(
        const std::array<uint8_t, 2>& _resultNumer3)
{
    m_resultNumer3 = _resultNumer3;
}

/*!
 * @brief This function moves the value in member resultNumer3
 * @param _resultNumer3 New value to be moved in member resultNumer3
 */
void ReplyInfo::resultNumer3(
        std::array<uint8_t, 2>&& _resultNumer3)
{
    m_resultNumer3 = std::move(_resultNumer3);
}

/*!
 * @brief This function returns a constant reference to member resultNumer3
 * @return Constant reference to member resultNumer3
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer3() const
{
    return m_resultNumer3;
}

/*!
 * @brief This function returns a reference to member resultNumer3
 * @return Reference to member resultNumer3
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer3()
{
    return m_resultNumer3;
}


/*!
 * @brief This function sets a value in member number4
 * @param _number4 New value for member number4
 */
void ReplyInfo::number4(
        uint16_t _number4)
{
    m_number4 = _number4;
}

/*!
 * @brief This function returns the value of member number4
 * @return Value of member number4
 */
uint16_t ReplyInfo::number4() const
{
    return m_number4;
}

/*!
 * @brief This function returns a reference to member number4
 * @return Reference to member number4
 */
uint16_t& ReplyInfo::number4()
{
    return m_number4;
}


/*!
 * @brief This function copies the value in member resultNumer4
 * @param _resultNumer4 New value to be copied in member resultNumer4
 */
void ReplyInfo::resultNumer4(
        const std::array<uint8_t, 2>& _resultNumer4)
{
    m_resultNumer4 = _resultNumer4;
}

/*!
 * @brief This function moves the value in member resultNumer4
 * @param _resultNumer4 New value to be moved in member resultNumer4
 */
void ReplyInfo::resultNumer4(
        std::array<uint8_t, 2>&& _resultNumer4)
{
    m_resultNumer4 = std::move(_resultNumer4);
}

/*!
 * @brief This function returns a constant reference to member resultNumer4
 * @return Constant reference to member resultNumer4
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer4() const
{
    return m_resultNumer4;
}

/*!
 * @brief This function returns a reference to member resultNumer4
 * @return Reference to member resultNumer4
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer4()
{
    return m_resultNumer4;
}


/*!
 * @brief This function sets a value in member number5
 * @param _number5 New value for member number5
 */
void ReplyInfo::number5(
        uint16_t _number5)
{
    m_number5 = _number5;
}

/*!
 * @brief This function returns the value of member number5
 * @return Value of member number5
 */
uint16_t ReplyInfo::number5() const
{
    return m_number5;
}

/*!
 * @brief This function returns a reference to member number5
 * @return Reference to member number5
 */
uint16_t& ReplyInfo::number5()
{
    return m_number5;
}


/*!
 * @brief This function copies the value in member resultNumer5
 * @param _resultNumer5 New value to be copied in member resultNumer5
 */
void ReplyInfo::resultNumer5(
        const std::array<uint8_t, 2>& _resultNumer5)
{
    m_resultNumer5 = _resultNumer5;
}

/*!
 * @brief This function moves the value in member resultNumer5
 * @param _resultNumer5 New value to be moved in member resultNumer5
 */
void ReplyInfo::resultNumer5(
        std::array<uint8_t, 2>&& _resultNumer5)
{
    m_resultNumer5 = std::move(_resultNumer5);
}

/*!
 * @brief This function returns a constant reference to member resultNumer5
 * @return Constant reference to member resultNumer5
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer5() const
{
    return m_resultNumer5;
}

/*!
 * @brief This function returns a reference to member resultNumer5
 * @return Reference to member resultNumer5
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer5()
{
    return m_resultNumer5;
}


/*!
 * @brief This function sets a value in member number6
 * @param _number6 New value for member number6
 */
void ReplyInfo::number6(
        uint16_t _number6)
{
    m_number6 = _number6;
}

/*!
 * @brief This function returns the value of member number6
 * @return Value of member number6
 */
uint16_t ReplyInfo::number6() const
{
    return m_number6;
}

/*!
 * @brief This function returns a reference to member number6
 * @return Reference to member number6
 */
uint16_t& ReplyInfo::number6()
{
    return m_number6;
}


/*!
 * @brief This function copies the value in member resultNumer6
 * @param _resultNumer6 New value to be copied in member resultNumer6
 */
void ReplyInfo::resultNumer6(
        const std::array<uint8_t, 2>& _resultNumer6)
{
    m_resultNumer6 = _resultNumer6;
}

/*!
 * @brief This function moves the value in member resultNumer6
 * @param _resultNumer6 New value to be moved in member resultNumer6
 */
void ReplyInfo::resultNumer6(
        std::array<uint8_t, 2>&& _resultNumer6)
{
    m_resultNumer6 = std::move(_resultNumer6);
}

/*!
 * @brief This function returns a constant reference to member resultNumer6
 * @return Constant reference to member resultNumer6
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer6() const
{
    return m_resultNumer6;
}

/*!
 * @brief This function returns a reference to member resultNumer6
 * @return Reference to member resultNumer6
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer6()
{
    return m_resultNumer6;
}


/*!
 * @brief This function sets a value in member number7
 * @param _number7 New value for member number7
 */
void ReplyInfo::number7(
        uint16_t _number7)
{
    m_number7 = _number7;
}

/*!
 * @brief This function returns the value of member number7
 * @return Value of member number7
 */
uint16_t ReplyInfo::number7() const
{
    return m_number7;
}

/*!
 * @brief This function returns a reference to member number7
 * @return Reference to member number7
 */
uint16_t& ReplyInfo::number7()
{
    return m_number7;
}


/*!
 * @brief This function copies the value in member resultNumer7
 * @param _resultNumer7 New value to be copied in member resultNumer7
 */
void ReplyInfo::resultNumer7(
        const std::array<uint8_t, 2>& _resultNumer7)
{
    m_resultNumer7 = _resultNumer7;
}

/*!
 * @brief This function moves the value in member resultNumer7
 * @param _resultNumer7 New value to be moved in member resultNumer7
 */
void ReplyInfo::resultNumer7(
        std::array<uint8_t, 2>&& _resultNumer7)
{
    m_resultNumer7 = std::move(_resultNumer7);
}

/*!
 * @brief This function returns a constant reference to member resultNumer7
 * @return Constant reference to member resultNumer7
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer7() const
{
    return m_resultNumer7;
}

/*!
 * @brief This function returns a reference to member resultNumer7
 * @return Reference to member resultNumer7
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer7()
{
    return m_resultNumer7;
}


/*!
 * @brief This function sets a value in member number8
 * @param _number8 New value for member number8
 */
void ReplyInfo::number8(
        uint16_t _number8)
{
    m_number8 = _number8;
}

/*!
 * @brief This function returns the value of member number8
 * @return Value of member number8
 */
uint16_t ReplyInfo::number8() const
{
    return m_number8;
}

/*!
 * @brief This function returns a reference to member number8
 * @return Reference to member number8
 */
uint16_t& ReplyInfo::number8()
{
    return m_number8;
}


/*!
 * @brief This function copies the value in member resultNumer8
 * @param _resultNumer8 New value to be copied in member resultNumer8
 */
void ReplyInfo::resultNumer8(
        const std::array<uint8_t, 2>& _resultNumer8)
{
    m_resultNumer8 = _resultNumer8;
}

/*!
 * @brief This function moves the value in member resultNumer8
 * @param _resultNumer8 New value to be moved in member resultNumer8
 */
void ReplyInfo::resultNumer8(
        std::array<uint8_t, 2>&& _resultNumer8)
{
    m_resultNumer8 = std::move(_resultNumer8);
}

/*!
 * @brief This function returns a constant reference to member resultNumer8
 * @return Constant reference to member resultNumer8
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer8() const
{
    return m_resultNumer8;
}

/*!
 * @brief This function returns a reference to member resultNumer8
 * @return Reference to member resultNumer8
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer8()
{
    return m_resultNumer8;
}


/*!
 * @brief This function sets a value in member number9
 * @param _number9 New value for member number9
 */
void ReplyInfo::number9(
        uint16_t _number9)
{
    m_number9 = _number9;
}

/*!
 * @brief This function returns the value of member number9
 * @return Value of member number9
 */
uint16_t ReplyInfo::number9() const
{
    return m_number9;
}

/*!
 * @brief This function returns a reference to member number9
 * @return Reference to member number9
 */
uint16_t& ReplyInfo::number9()
{
    return m_number9;
}


/*!
 * @brief This function copies the value in member resultNumer9
 * @param _resultNumer9 New value to be copied in member resultNumer9
 */
void ReplyInfo::resultNumer9(
        const std::array<uint8_t, 2>& _resultNumer9)
{
    m_resultNumer9 = _resultNumer9;
}

/*!
 * @brief This function moves the value in member resultNumer9
 * @param _resultNumer9 New value to be moved in member resultNumer9
 */
void ReplyInfo::resultNumer9(
        std::array<uint8_t, 2>&& _resultNumer9)
{
    m_resultNumer9 = std::move(_resultNumer9);
}

/*!
 * @brief This function returns a constant reference to member resultNumer9
 * @return Constant reference to member resultNumer9
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer9() const
{
    return m_resultNumer9;
}

/*!
 * @brief This function returns a reference to member resultNumer9
 * @return Reference to member resultNumer9
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer9()
{
    return m_resultNumer9;
}


/*!
 * @brief This function sets a value in member number10
 * @param _number10 New value for member number10
 */
void ReplyInfo::number10(
        uint16_t _number10)
{
    m_number10 = _number10;
}

/*!
 * @brief This function returns the value of member number10
 * @return Value of member number10
 */
uint16_t ReplyInfo::number10() const
{
    return m_number10;
}

/*!
 * @brief This function returns a reference to member number10
 * @return Reference to member number10
 */
uint16_t& ReplyInfo::number10()
{
    return m_number10;
}


/*!
 * @brief This function copies the value in member resultNumer10
 * @param _resultNumer10 New value to be copied in member resultNumer10
 */
void ReplyInfo::resultNumer10(
        const std::array<uint8_t, 2>& _resultNumer10)
{
    m_resultNumer10 = _resultNumer10;
}

/*!
 * @brief This function moves the value in member resultNumer10
 * @param _resultNumer10 New value to be moved in member resultNumer10
 */
void ReplyInfo::resultNumer10(
        std::array<uint8_t, 2>&& _resultNumer10)
{
    m_resultNumer10 = std::move(_resultNumer10);
}

/*!
 * @brief This function returns a constant reference to member resultNumer10
 * @return Constant reference to member resultNumer10
 */
const std::array<uint8_t, 2>& ReplyInfo::resultNumer10() const
{
    return m_resultNumer10;
}

/*!
 * @brief This function returns a reference to member resultNumer10
 * @return Reference to member resultNumer10
 */
std::array<uint8_t, 2>& ReplyInfo::resultNumer10()
{
    return m_resultNumer10;
}




HeartBeat::HeartBeat()
{
}

HeartBeat::~HeartBeat()
{
}

HeartBeat::HeartBeat(
        const HeartBeat& x)
{
    m_isOnline = x.m_isOnline;
}

HeartBeat::HeartBeat(
        HeartBeat&& x) noexcept
{
    m_isOnline = x.m_isOnline;
}

HeartBeat& HeartBeat::operator =(
        const HeartBeat& x)
{

    m_isOnline = x.m_isOnline;
    return *this;
}

HeartBeat& HeartBeat::operator =(
        HeartBeat&& x) noexcept
{

    m_isOnline = x.m_isOnline;
    return *this;
}

bool HeartBeat::operator ==(
        const HeartBeat& x) const
{
    return (m_isOnline == x.m_isOnline);
}

bool HeartBeat::operator !=(
        const HeartBeat& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member isOnline
 * @param _isOnline New value for member isOnline
 */
void HeartBeat::isOnline(
        uint8_t _isOnline)
{
    m_isOnline = _isOnline;
}

/*!
 * @brief This function returns the value of member isOnline
 * @return Value of member isOnline
 */
uint8_t HeartBeat::isOnline() const
{
    return m_isOnline;
}

/*!
 * @brief This function returns a reference to member isOnline
 * @return Reference to member isOnline
 */
uint8_t& HeartBeat::isOnline()
{
    return m_isOnline;
}




GuidanceNodeDStartInfo::GuidanceNodeDStartInfo()
{
}

GuidanceNodeDStartInfo::~GuidanceNodeDStartInfo()
{
}

GuidanceNodeDStartInfo::GuidanceNodeDStartInfo(
        const GuidanceNodeDStartInfo& x)
{
    m_isStart = x.m_isStart;
}

GuidanceNodeDStartInfo::GuidanceNodeDStartInfo(
        GuidanceNodeDStartInfo&& x) noexcept
{
    m_isStart = x.m_isStart;
}

GuidanceNodeDStartInfo& GuidanceNodeDStartInfo::operator =(
        const GuidanceNodeDStartInfo& x)
{

    m_isStart = x.m_isStart;
    return *this;
}

GuidanceNodeDStartInfo& GuidanceNodeDStartInfo::operator =(
        GuidanceNodeDStartInfo&& x) noexcept
{

    m_isStart = x.m_isStart;
    return *this;
}

bool GuidanceNodeDStartInfo::operator ==(
        const GuidanceNodeDStartInfo& x) const
{
    return (m_isStart == x.m_isStart);
}

bool GuidanceNodeDStartInfo::operator !=(
        const GuidanceNodeDStartInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member isStart
 * @param _isStart New value for member isStart
 */
void GuidanceNodeDStartInfo::isStart(
        uint8_t _isStart)
{
    m_isStart = _isStart;
}

/*!
 * @brief This function returns the value of member isStart
 * @return Value of member isStart
 */
uint8_t GuidanceNodeDStartInfo::isStart() const
{
    return m_isStart;
}

/*!
 * @brief This function returns a reference to member isStart
 * @return Reference to member isStart
 */
uint8_t& GuidanceNodeDStartInfo::isStart()
{
    return m_isStart;
}


// Include auxiliary functions like for serializing/deserializing.
#include "DataDefineCdrAux.ipp"

